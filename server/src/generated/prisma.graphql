# source: https://eu1.prisma.sh/larsdood-53fd52/tekwerk-db/dev
# timestamp: Sun Sep 09 2018 15:37:42 GMT+0200 (W. Europe Summer Time)

type AggregateApplication {
  count: Int!
}

type AggregateEducation {
  count: Int!
}

type AggregateEmployer {
  count: Int!
}

type AggregateEmploymentProcess {
  count: Int!
}

type AggregateMoneyAmount {
  count: Int!
}

type AggregatePosting {
  count: Int!
}

type AggregateQualification {
  count: Int!
}

type AggregateRequirement {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application implements Node {
  id: ID!
  posting(where: PostingWhereInput): Posting!
  applicant(where: UserWhereInput): User!
  applicationLetter: String!
  status: ApplicationStatus!
}

"""A connection to a list of items."""
type ApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  applicationLetter: String!
  status: ApplicationStatus!
  posting: PostingCreateOneWithoutApplicationsInput!
  applicant: UserCreateOneWithoutApplicationsInput!
}

input ApplicationCreateManyWithoutApplicantInput {
  create: [ApplicationCreateWithoutApplicantInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutPostingInput {
  create: [ApplicationCreateWithoutPostingInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutApplicantInput {
  applicationLetter: String!
  status: ApplicationStatus!
  posting: PostingCreateOneWithoutApplicationsInput!
}

input ApplicationCreateWithoutPostingInput {
  applicationLetter: String!
  status: ApplicationStatus!
  applicant: UserCreateOneWithoutApplicationsInput!
}

"""An edge in a connection."""
type ApplicationEdge {
  """The item at the end of the edge."""
  node: Application!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  applicationLetter_ASC
  applicationLetter_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ApplicationPreviousValues {
  id: ID!
  applicationLetter: String!
  status: ApplicationStatus!
}

enum ApplicationStatus {
  UNSENDT
  IN_PROGRESS
  REJECTED
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ApplicationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApplicationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApplicationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
}

input ApplicationUpdateInput {
  applicationLetter: String
  status: ApplicationStatus
  posting: PostingUpdateOneWithoutApplicationsInput
  applicant: UserUpdateOneWithoutApplicationsInput
}

input ApplicationUpdateManyWithoutApplicantInput {
  create: [ApplicationCreateWithoutApplicantInput!]
  connect: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  delete: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutApplicantInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutApplicantInput!]
}

input ApplicationUpdateManyWithoutPostingInput {
  create: [ApplicationCreateWithoutPostingInput!]
  connect: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  delete: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutPostingInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutPostingInput!]
}

input ApplicationUpdateWithoutApplicantDataInput {
  applicationLetter: String
  status: ApplicationStatus
  posting: PostingUpdateOneWithoutApplicationsInput
}

input ApplicationUpdateWithoutPostingDataInput {
  applicationLetter: String
  status: ApplicationStatus
  applicant: UserUpdateOneWithoutApplicationsInput
}

input ApplicationUpdateWithWhereUniqueWithoutApplicantInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutApplicantDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutPostingInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutPostingDataInput!
}

input ApplicationUpsertWithWhereUniqueWithoutApplicantInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutApplicantDataInput!
  create: ApplicationCreateWithoutApplicantInput!
}

input ApplicationUpsertWithWhereUniqueWithoutPostingInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutPostingDataInput!
  create: ApplicationCreateWithoutPostingInput!
}

input ApplicationWhereInput {
  """Logical AND on all given filters."""
  AND: [ApplicationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApplicationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApplicationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  applicationLetter: String

  """All values that are not equal to given value."""
  applicationLetter_not: String

  """All values that are contained in given list."""
  applicationLetter_in: [String!]

  """All values that are not contained in given list."""
  applicationLetter_not_in: [String!]

  """All values less than the given value."""
  applicationLetter_lt: String

  """All values less than or equal the given value."""
  applicationLetter_lte: String

  """All values greater than the given value."""
  applicationLetter_gt: String

  """All values greater than or equal the given value."""
  applicationLetter_gte: String

  """All values containing the given string."""
  applicationLetter_contains: String

  """All values not containing the given string."""
  applicationLetter_not_contains: String

  """All values starting with the given string."""
  applicationLetter_starts_with: String

  """All values not starting with the given string."""
  applicationLetter_not_starts_with: String

  """All values ending with the given string."""
  applicationLetter_ends_with: String

  """All values not ending with the given string."""
  applicationLetter_not_ends_with: String
  status: ApplicationStatus

  """All values that are not equal to given value."""
  status_not: ApplicationStatus

  """All values that are contained in given list."""
  status_in: [ApplicationStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ApplicationStatus!]
  posting: PostingWhereInput
  applicant: UserWhereInput
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

enum DegreeType {
  PHD
  MASTERS
  BACHELORS
  PROFESSION
  OTHER
}

type Education {
  schoolName: String!
  degreeName: String!
  degreeType: DegreeType!
  enrolledAt: DateTime!
  graduatedAt: DateTime!
  description: String
}

"""A connection to a list of items."""
type EducationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EducationEdge]!
  aggregate: AggregateEducation!
}

input EducationCreateInput {
  schoolName: String!
  degreeName: String!
  degreeType: DegreeType!
  enrolledAt: DateTime!
  graduatedAt: DateTime!
  description: String
}

input EducationCreateManyInput {
  create: [EducationCreateInput!]
}

"""An edge in a connection."""
type EducationEdge {
  """The item at the end of the edge."""
  node: Education!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EducationOrderByInput {
  schoolName_ASC
  schoolName_DESC
  degreeName_ASC
  degreeName_DESC
  degreeType_ASC
  degreeType_DESC
  enrolledAt_ASC
  enrolledAt_DESC
  graduatedAt_ASC
  graduatedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EducationPreviousValues {
  schoolName: String!
  degreeName: String!
  degreeType: DegreeType!
  enrolledAt: DateTime!
  graduatedAt: DateTime!
  description: String
}

type EducationSubscriptionPayload {
  mutation: MutationType!
  node: Education
  updatedFields: [String!]
  previousValues: EducationPreviousValues
}

input EducationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EducationWhereInput
}

input EducationUpdateInput {
  schoolName: String
  degreeName: String
  degreeType: DegreeType
  enrolledAt: DateTime
  graduatedAt: DateTime
  description: String
}

input EducationUpdateManyInput {
  create: [EducationCreateInput!]
}

input EducationWhereInput {
  """Logical AND on all given filters."""
  AND: [EducationWhereInput!]

  """Logical OR on all given filters."""
  OR: [EducationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EducationWhereInput!]
  schoolName: String

  """All values that are not equal to given value."""
  schoolName_not: String

  """All values that are contained in given list."""
  schoolName_in: [String!]

  """All values that are not contained in given list."""
  schoolName_not_in: [String!]

  """All values less than the given value."""
  schoolName_lt: String

  """All values less than or equal the given value."""
  schoolName_lte: String

  """All values greater than the given value."""
  schoolName_gt: String

  """All values greater than or equal the given value."""
  schoolName_gte: String

  """All values containing the given string."""
  schoolName_contains: String

  """All values not containing the given string."""
  schoolName_not_contains: String

  """All values starting with the given string."""
  schoolName_starts_with: String

  """All values not starting with the given string."""
  schoolName_not_starts_with: String

  """All values ending with the given string."""
  schoolName_ends_with: String

  """All values not ending with the given string."""
  schoolName_not_ends_with: String
  degreeName: String

  """All values that are not equal to given value."""
  degreeName_not: String

  """All values that are contained in given list."""
  degreeName_in: [String!]

  """All values that are not contained in given list."""
  degreeName_not_in: [String!]

  """All values less than the given value."""
  degreeName_lt: String

  """All values less than or equal the given value."""
  degreeName_lte: String

  """All values greater than the given value."""
  degreeName_gt: String

  """All values greater than or equal the given value."""
  degreeName_gte: String

  """All values containing the given string."""
  degreeName_contains: String

  """All values not containing the given string."""
  degreeName_not_contains: String

  """All values starting with the given string."""
  degreeName_starts_with: String

  """All values not starting with the given string."""
  degreeName_not_starts_with: String

  """All values ending with the given string."""
  degreeName_ends_with: String

  """All values not ending with the given string."""
  degreeName_not_ends_with: String
  degreeType: DegreeType

  """All values that are not equal to given value."""
  degreeType_not: DegreeType

  """All values that are contained in given list."""
  degreeType_in: [DegreeType!]

  """All values that are not contained in given list."""
  degreeType_not_in: [DegreeType!]
  enrolledAt: DateTime

  """All values that are not equal to given value."""
  enrolledAt_not: DateTime

  """All values that are contained in given list."""
  enrolledAt_in: [DateTime!]

  """All values that are not contained in given list."""
  enrolledAt_not_in: [DateTime!]

  """All values less than the given value."""
  enrolledAt_lt: DateTime

  """All values less than or equal the given value."""
  enrolledAt_lte: DateTime

  """All values greater than the given value."""
  enrolledAt_gt: DateTime

  """All values greater than or equal the given value."""
  enrolledAt_gte: DateTime
  graduatedAt: DateTime

  """All values that are not equal to given value."""
  graduatedAt_not: DateTime

  """All values that are contained in given list."""
  graduatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  graduatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  graduatedAt_lt: DateTime

  """All values less than or equal the given value."""
  graduatedAt_lte: DateTime

  """All values greater than the given value."""
  graduatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  graduatedAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type Employer implements Node {
  id: ID!
  contactEmail: String!
  companyName: String!
  logoUrl: String
  postings(where: PostingWhereInput, orderBy: PostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Posting!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  processes(where: EmploymentProcessWhereInput, orderBy: EmploymentProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmploymentProcess!]
}

enum EmployerAccessRights {
  ADMIN
  EDITOR
}

"""A connection to a list of items."""
type EmployerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployerEdge]!
  aggregate: AggregateEmployer!
}

input EmployerCreateInput {
  contactEmail: String!
  companyName: String!
  logoUrl: String
  postings: PostingCreateManyWithoutOfferedByInput
  users: UserCreateManyWithoutEmployerInput
  processes: EmploymentProcessCreateManyWithoutEmployerInput
}

input EmployerCreateOneWithoutPostingsInput {
  create: EmployerCreateWithoutPostingsInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateOneWithoutProcessesInput {
  create: EmployerCreateWithoutProcessesInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateOneWithoutUsersInput {
  create: EmployerCreateWithoutUsersInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateWithoutPostingsInput {
  contactEmail: String!
  companyName: String!
  logoUrl: String
  users: UserCreateManyWithoutEmployerInput
  processes: EmploymentProcessCreateManyWithoutEmployerInput
}

input EmployerCreateWithoutProcessesInput {
  contactEmail: String!
  companyName: String!
  logoUrl: String
  postings: PostingCreateManyWithoutOfferedByInput
  users: UserCreateManyWithoutEmployerInput
}

input EmployerCreateWithoutUsersInput {
  contactEmail: String!
  companyName: String!
  logoUrl: String
  postings: PostingCreateManyWithoutOfferedByInput
  processes: EmploymentProcessCreateManyWithoutEmployerInput
}

"""An edge in a connection."""
type EmployerEdge {
  """The item at the end of the edge."""
  node: Employer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmployerOrderByInput {
  id_ASC
  id_DESC
  contactEmail_ASC
  contactEmail_DESC
  companyName_ASC
  companyName_DESC
  logoUrl_ASC
  logoUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmployerPreviousValues {
  id: ID!
  contactEmail: String!
  companyName: String!
  logoUrl: String
}

type EmployerSubscriptionPayload {
  mutation: MutationType!
  node: Employer
  updatedFields: [String!]
  previousValues: EmployerPreviousValues
}

input EmployerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmployerWhereInput
}

input EmployerUpdateInput {
  contactEmail: String
  companyName: String
  logoUrl: String
  postings: PostingUpdateManyWithoutOfferedByInput
  users: UserUpdateManyWithoutEmployerInput
  processes: EmploymentProcessUpdateManyWithoutEmployerInput
}

input EmployerUpdateOneWithoutPostingsInput {
  create: EmployerCreateWithoutPostingsInput
  connect: EmployerWhereUniqueInput
  delete: Boolean
  update: EmployerUpdateWithoutPostingsDataInput
  upsert: EmployerUpsertWithoutPostingsInput
}

input EmployerUpdateOneWithoutProcessesInput {
  create: EmployerCreateWithoutProcessesInput
  connect: EmployerWhereUniqueInput
  delete: Boolean
  update: EmployerUpdateWithoutProcessesDataInput
  upsert: EmployerUpsertWithoutProcessesInput
}

input EmployerUpdateOneWithoutUsersInput {
  create: EmployerCreateWithoutUsersInput
  connect: EmployerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EmployerUpdateWithoutUsersDataInput
  upsert: EmployerUpsertWithoutUsersInput
}

input EmployerUpdateWithoutPostingsDataInput {
  contactEmail: String
  companyName: String
  logoUrl: String
  users: UserUpdateManyWithoutEmployerInput
  processes: EmploymentProcessUpdateManyWithoutEmployerInput
}

input EmployerUpdateWithoutProcessesDataInput {
  contactEmail: String
  companyName: String
  logoUrl: String
  postings: PostingUpdateManyWithoutOfferedByInput
  users: UserUpdateManyWithoutEmployerInput
}

input EmployerUpdateWithoutUsersDataInput {
  contactEmail: String
  companyName: String
  logoUrl: String
  postings: PostingUpdateManyWithoutOfferedByInput
  processes: EmploymentProcessUpdateManyWithoutEmployerInput
}

input EmployerUpsertWithoutPostingsInput {
  update: EmployerUpdateWithoutPostingsDataInput!
  create: EmployerCreateWithoutPostingsInput!
}

input EmployerUpsertWithoutProcessesInput {
  update: EmployerUpdateWithoutProcessesDataInput!
  create: EmployerCreateWithoutProcessesInput!
}

input EmployerUpsertWithoutUsersInput {
  update: EmployerUpdateWithoutUsersDataInput!
  create: EmployerCreateWithoutUsersInput!
}

input EmployerWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployerWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contactEmail: String

  """All values that are not equal to given value."""
  contactEmail_not: String

  """All values that are contained in given list."""
  contactEmail_in: [String!]

  """All values that are not contained in given list."""
  contactEmail_not_in: [String!]

  """All values less than the given value."""
  contactEmail_lt: String

  """All values less than or equal the given value."""
  contactEmail_lte: String

  """All values greater than the given value."""
  contactEmail_gt: String

  """All values greater than or equal the given value."""
  contactEmail_gte: String

  """All values containing the given string."""
  contactEmail_contains: String

  """All values not containing the given string."""
  contactEmail_not_contains: String

  """All values starting with the given string."""
  contactEmail_starts_with: String

  """All values not starting with the given string."""
  contactEmail_not_starts_with: String

  """All values ending with the given string."""
  contactEmail_ends_with: String

  """All values not ending with the given string."""
  contactEmail_not_ends_with: String
  companyName: String

  """All values that are not equal to given value."""
  companyName_not: String

  """All values that are contained in given list."""
  companyName_in: [String!]

  """All values that are not contained in given list."""
  companyName_not_in: [String!]

  """All values less than the given value."""
  companyName_lt: String

  """All values less than or equal the given value."""
  companyName_lte: String

  """All values greater than the given value."""
  companyName_gt: String

  """All values greater than or equal the given value."""
  companyName_gte: String

  """All values containing the given string."""
  companyName_contains: String

  """All values not containing the given string."""
  companyName_not_contains: String

  """All values starting with the given string."""
  companyName_starts_with: String

  """All values not starting with the given string."""
  companyName_not_starts_with: String

  """All values ending with the given string."""
  companyName_ends_with: String

  """All values not ending with the given string."""
  companyName_not_ends_with: String
  logoUrl: String

  """All values that are not equal to given value."""
  logoUrl_not: String

  """All values that are contained in given list."""
  logoUrl_in: [String!]

  """All values that are not contained in given list."""
  logoUrl_not_in: [String!]

  """All values less than the given value."""
  logoUrl_lt: String

  """All values less than or equal the given value."""
  logoUrl_lte: String

  """All values greater than the given value."""
  logoUrl_gt: String

  """All values greater than or equal the given value."""
  logoUrl_gte: String

  """All values containing the given string."""
  logoUrl_contains: String

  """All values not containing the given string."""
  logoUrl_not_contains: String

  """All values starting with the given string."""
  logoUrl_starts_with: String

  """All values not starting with the given string."""
  logoUrl_not_starts_with: String

  """All values ending with the given string."""
  logoUrl_ends_with: String

  """All values not ending with the given string."""
  logoUrl_not_ends_with: String
  postings_every: PostingWhereInput
  postings_some: PostingWhereInput
  postings_none: PostingWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  processes_every: EmploymentProcessWhereInput
  processes_some: EmploymentProcessWhereInput
  processes_none: EmploymentProcessWhereInput
}

input EmployerWhereUniqueInput {
  id: ID
  contactEmail: String
  companyName: String
}

type EmploymentProcess implements Node {
  id: ID!
  candidate(where: UserWhereInput): User!
  employer(where: EmployerWhereInput): Employer!
}

"""A connection to a list of items."""
type EmploymentProcessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmploymentProcessEdge]!
  aggregate: AggregateEmploymentProcess!
}

input EmploymentProcessCreateInput {
  candidate: UserCreateOneInput!
  employer: EmployerCreateOneWithoutProcessesInput!
}

input EmploymentProcessCreateManyWithoutEmployerInput {
  create: [EmploymentProcessCreateWithoutEmployerInput!]
  connect: [EmploymentProcessWhereUniqueInput!]
}

input EmploymentProcessCreateWithoutEmployerInput {
  candidate: UserCreateOneInput!
}

"""An edge in a connection."""
type EmploymentProcessEdge {
  """The item at the end of the edge."""
  node: EmploymentProcess!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmploymentProcessOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmploymentProcessPreviousValues {
  id: ID!
}

type EmploymentProcessSubscriptionPayload {
  mutation: MutationType!
  node: EmploymentProcess
  updatedFields: [String!]
  previousValues: EmploymentProcessPreviousValues
}

input EmploymentProcessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmploymentProcessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmploymentProcessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmploymentProcessSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmploymentProcessWhereInput
}

input EmploymentProcessUpdateInput {
  candidate: UserUpdateOneInput
  employer: EmployerUpdateOneWithoutProcessesInput
}

input EmploymentProcessUpdateManyWithoutEmployerInput {
  create: [EmploymentProcessCreateWithoutEmployerInput!]
  connect: [EmploymentProcessWhereUniqueInput!]
  disconnect: [EmploymentProcessWhereUniqueInput!]
  delete: [EmploymentProcessWhereUniqueInput!]
  update: [EmploymentProcessUpdateWithWhereUniqueWithoutEmployerInput!]
  upsert: [EmploymentProcessUpsertWithWhereUniqueWithoutEmployerInput!]
}

input EmploymentProcessUpdateWithoutEmployerDataInput {
  candidate: UserUpdateOneInput
}

input EmploymentProcessUpdateWithWhereUniqueWithoutEmployerInput {
  where: EmploymentProcessWhereUniqueInput!
  data: EmploymentProcessUpdateWithoutEmployerDataInput!
}

input EmploymentProcessUpsertWithWhereUniqueWithoutEmployerInput {
  where: EmploymentProcessWhereUniqueInput!
  update: EmploymentProcessUpdateWithoutEmployerDataInput!
  create: EmploymentProcessCreateWithoutEmployerInput!
}

input EmploymentProcessWhereInput {
  """Logical AND on all given filters."""
  AND: [EmploymentProcessWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmploymentProcessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmploymentProcessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  candidate: UserWhereInput
  employer: EmployerWhereInput
}

input EmploymentProcessWhereUniqueInput {
  id: ID
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACTOR
}

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MoneyAmount {
  currencyCode: String!
  amount: Int!
}

"""A connection to a list of items."""
type MoneyAmountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MoneyAmountEdge]!
  aggregate: AggregateMoneyAmount!
}

input MoneyAmountCreateInput {
  currencyCode: String!
  amount: Int!
}

input MoneyAmountCreateOneInput {
  create: MoneyAmountCreateInput
}

"""An edge in a connection."""
type MoneyAmountEdge {
  """The item at the end of the edge."""
  node: MoneyAmount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MoneyAmountOrderByInput {
  currencyCode_ASC
  currencyCode_DESC
  amount_ASC
  amount_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MoneyAmountPreviousValues {
  currencyCode: String!
  amount: Int!
}

type MoneyAmountSubscriptionPayload {
  mutation: MutationType!
  node: MoneyAmount
  updatedFields: [String!]
  previousValues: MoneyAmountPreviousValues
}

input MoneyAmountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MoneyAmountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MoneyAmountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MoneyAmountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MoneyAmountWhereInput
}

input MoneyAmountUpdateDataInput {
  currencyCode: String
  amount: Int
}

input MoneyAmountUpdateInput {
  currencyCode: String
  amount: Int
}

input MoneyAmountUpdateOneInput {
  create: MoneyAmountCreateInput
  disconnect: Boolean
  delete: Boolean
  update: MoneyAmountUpdateDataInput
  upsert: MoneyAmountUpsertNestedInput
}

input MoneyAmountUpsertNestedInput {
  update: MoneyAmountUpdateDataInput!
  create: MoneyAmountCreateInput!
}

input MoneyAmountWhereInput {
  """Logical AND on all given filters."""
  AND: [MoneyAmountWhereInput!]

  """Logical OR on all given filters."""
  OR: [MoneyAmountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MoneyAmountWhereInput!]
  currencyCode: String

  """All values that are not equal to given value."""
  currencyCode_not: String

  """All values that are contained in given list."""
  currencyCode_in: [String!]

  """All values that are not contained in given list."""
  currencyCode_not_in: [String!]

  """All values less than the given value."""
  currencyCode_lt: String

  """All values less than or equal the given value."""
  currencyCode_lte: String

  """All values greater than the given value."""
  currencyCode_gt: String

  """All values greater than or equal the given value."""
  currencyCode_gte: String

  """All values containing the given string."""
  currencyCode_contains: String

  """All values not containing the given string."""
  currencyCode_not_contains: String

  """All values starting with the given string."""
  currencyCode_starts_with: String

  """All values not starting with the given string."""
  currencyCode_not_starts_with: String

  """All values ending with the given string."""
  currencyCode_ends_with: String

  """All values not ending with the given string."""
  currencyCode_not_ends_with: String
  amount: Int

  """All values that are not equal to given value."""
  amount_not: Int

  """All values that are contained in given list."""
  amount_in: [Int!]

  """All values that are not contained in given list."""
  amount_not_in: [Int!]

  """All values less than the given value."""
  amount_lt: Int

  """All values less than or equal the given value."""
  amount_lte: Int

  """All values greater than the given value."""
  amount_gt: Int

  """All values greater than or equal the given value."""
  amount_gte: Int
}

type Mutation {
  createEmployer(data: EmployerCreateInput!): Employer!
  createApplication(data: ApplicationCreateInput!): Application!
  createEmploymentProcess(data: EmploymentProcessCreateInput!): EmploymentProcess!
  createPosting(data: PostingCreateInput!): Posting!
  createQualification(data: QualificationCreateInput!): Qualification!
  createEducation(data: EducationCreateInput!): Education!
  createRequirement(data: RequirementCreateInput!): Requirement!
  createMoneyAmount(data: MoneyAmountCreateInput!): MoneyAmount!
  createUser(data: UserCreateInput!): User!
  updateEmployer(data: EmployerUpdateInput!, where: EmployerWhereUniqueInput!): Employer
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateEmploymentProcess(data: EmploymentProcessUpdateInput!, where: EmploymentProcessWhereUniqueInput!): EmploymentProcess
  updatePosting(data: PostingUpdateInput!, where: PostingWhereUniqueInput!): Posting
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEmployer(where: EmployerWhereUniqueInput!): Employer
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteEmploymentProcess(where: EmploymentProcessWhereUniqueInput!): EmploymentProcess
  deletePosting(where: PostingWhereUniqueInput!): Posting
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEmployer(where: EmployerWhereUniqueInput!, create: EmployerCreateInput!, update: EmployerUpdateInput!): Employer!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  upsertEmploymentProcess(where: EmploymentProcessWhereUniqueInput!, create: EmploymentProcessCreateInput!, update: EmploymentProcessUpdateInput!): EmploymentProcess!
  upsertPosting(where: PostingWhereUniqueInput!, create: PostingCreateInput!, update: PostingUpdateInput!): Posting!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEmployers(data: EmployerUpdateInput!, where: EmployerWhereInput): BatchPayload!
  updateManyApplications(data: ApplicationUpdateInput!, where: ApplicationWhereInput): BatchPayload!
  updateManyEmploymentProcesses(data: EmploymentProcessUpdateInput!, where: EmploymentProcessWhereInput): BatchPayload!
  updateManyPostings(data: PostingUpdateInput!, where: PostingWhereInput): BatchPayload!
  updateManyQualifications(data: QualificationUpdateInput!, where: QualificationWhereInput): BatchPayload!
  updateManyEducations(data: EducationUpdateInput!, where: EducationWhereInput): BatchPayload!
  updateManyRequirements(data: RequirementUpdateInput!, where: RequirementWhereInput): BatchPayload!
  updateManyMoneyAmounts(data: MoneyAmountUpdateInput!, where: MoneyAmountWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyEmployers(where: EmployerWhereInput): BatchPayload!
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  deleteManyEmploymentProcesses(where: EmploymentProcessWhereInput): BatchPayload!
  deleteManyPostings(where: PostingWhereInput): BatchPayload!
  deleteManyQualifications(where: QualificationWhereInput): BatchPayload!
  deleteManyEducations(where: EducationWhereInput): BatchPayload!
  deleteManyRequirements(where: RequirementWhereInput): BatchPayload!
  deleteManyMoneyAmounts(where: MoneyAmountWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Posting implements Node {
  id: ID!
  customId: String!
  offeredBy(where: EmployerWhereInput): Employer!
  postingTitle: String!
  positionTitle: String!
  employmentType: EmploymentType!
  status: PostingStatus!
  description: String
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement!]
  niceToHave: [String!]!
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  createdDate: DateTime!
  expiresAt: DateTime!
  minimumSalaryOffer(where: MoneyAmountWhereInput): MoneyAmount
  maximumSalaryOffer(where: MoneyAmountWhereInput): MoneyAmount
}

"""A connection to a list of items."""
type PostingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostingEdge]!
  aggregate: AggregatePosting!
}

input PostingCreateInput {
  customId: String!
  postingTitle: String!
  positionTitle: String!
  employmentType: EmploymentType!
  status: PostingStatus!
  description: String
  createdDate: DateTime!
  expiresAt: DateTime!
  niceToHave: PostingCreateniceToHaveInput
  offeredBy: EmployerCreateOneWithoutPostingsInput!
  requirements: RequirementCreateManyInput
  applications: ApplicationCreateManyWithoutPostingInput
  minimumSalaryOffer: MoneyAmountCreateOneInput
  maximumSalaryOffer: MoneyAmountCreateOneInput
}

input PostingCreateManyWithoutOfferedByInput {
  create: [PostingCreateWithoutOfferedByInput!]
  connect: [PostingWhereUniqueInput!]
}

input PostingCreateniceToHaveInput {
  set: [String!]
}

input PostingCreateOneWithoutApplicationsInput {
  create: PostingCreateWithoutApplicationsInput
  connect: PostingWhereUniqueInput
}

input PostingCreateWithoutApplicationsInput {
  customId: String!
  postingTitle: String!
  positionTitle: String!
  employmentType: EmploymentType!
  status: PostingStatus!
  description: String
  createdDate: DateTime!
  expiresAt: DateTime!
  niceToHave: PostingCreateniceToHaveInput
  offeredBy: EmployerCreateOneWithoutPostingsInput!
  requirements: RequirementCreateManyInput
  minimumSalaryOffer: MoneyAmountCreateOneInput
  maximumSalaryOffer: MoneyAmountCreateOneInput
}

input PostingCreateWithoutOfferedByInput {
  customId: String!
  postingTitle: String!
  positionTitle: String!
  employmentType: EmploymentType!
  status: PostingStatus!
  description: String
  createdDate: DateTime!
  expiresAt: DateTime!
  niceToHave: PostingCreateniceToHaveInput
  requirements: RequirementCreateManyInput
  applications: ApplicationCreateManyWithoutPostingInput
  minimumSalaryOffer: MoneyAmountCreateOneInput
  maximumSalaryOffer: MoneyAmountCreateOneInput
}

"""An edge in a connection."""
type PostingEdge {
  """The item at the end of the edge."""
  node: Posting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostingOrderByInput {
  id_ASC
  id_DESC
  customId_ASC
  customId_DESC
  postingTitle_ASC
  postingTitle_DESC
  positionTitle_ASC
  positionTitle_DESC
  employmentType_ASC
  employmentType_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  createdDate_ASC
  createdDate_DESC
  expiresAt_ASC
  expiresAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostingPreviousValues {
  id: ID!
  customId: String!
  postingTitle: String!
  positionTitle: String!
  employmentType: EmploymentType!
  status: PostingStatus!
  description: String
  niceToHave: [String!]!
  createdDate: DateTime!
  expiresAt: DateTime!
}

enum PostingStatus {
  ACTIVE
  ARCHIVED
  UPCOMING
}

type PostingSubscriptionPayload {
  mutation: MutationType!
  node: Posting
  updatedFields: [String!]
  previousValues: PostingPreviousValues
}

input PostingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostingWhereInput
}

input PostingUpdateInput {
  customId: String
  postingTitle: String
  positionTitle: String
  employmentType: EmploymentType
  status: PostingStatus
  description: String
  createdDate: DateTime
  expiresAt: DateTime
  niceToHave: PostingUpdateniceToHaveInput
  offeredBy: EmployerUpdateOneWithoutPostingsInput
  requirements: RequirementUpdateManyInput
  applications: ApplicationUpdateManyWithoutPostingInput
  minimumSalaryOffer: MoneyAmountUpdateOneInput
  maximumSalaryOffer: MoneyAmountUpdateOneInput
}

input PostingUpdateManyWithoutOfferedByInput {
  create: [PostingCreateWithoutOfferedByInput!]
  connect: [PostingWhereUniqueInput!]
  disconnect: [PostingWhereUniqueInput!]
  delete: [PostingWhereUniqueInput!]
  update: [PostingUpdateWithWhereUniqueWithoutOfferedByInput!]
  upsert: [PostingUpsertWithWhereUniqueWithoutOfferedByInput!]
}

input PostingUpdateniceToHaveInput {
  set: [String!]
}

input PostingUpdateOneWithoutApplicationsInput {
  create: PostingCreateWithoutApplicationsInput
  connect: PostingWhereUniqueInput
  delete: Boolean
  update: PostingUpdateWithoutApplicationsDataInput
  upsert: PostingUpsertWithoutApplicationsInput
}

input PostingUpdateWithoutApplicationsDataInput {
  customId: String
  postingTitle: String
  positionTitle: String
  employmentType: EmploymentType
  status: PostingStatus
  description: String
  createdDate: DateTime
  expiresAt: DateTime
  niceToHave: PostingUpdateniceToHaveInput
  offeredBy: EmployerUpdateOneWithoutPostingsInput
  requirements: RequirementUpdateManyInput
  minimumSalaryOffer: MoneyAmountUpdateOneInput
  maximumSalaryOffer: MoneyAmountUpdateOneInput
}

input PostingUpdateWithoutOfferedByDataInput {
  customId: String
  postingTitle: String
  positionTitle: String
  employmentType: EmploymentType
  status: PostingStatus
  description: String
  createdDate: DateTime
  expiresAt: DateTime
  niceToHave: PostingUpdateniceToHaveInput
  requirements: RequirementUpdateManyInput
  applications: ApplicationUpdateManyWithoutPostingInput
  minimumSalaryOffer: MoneyAmountUpdateOneInput
  maximumSalaryOffer: MoneyAmountUpdateOneInput
}

input PostingUpdateWithWhereUniqueWithoutOfferedByInput {
  where: PostingWhereUniqueInput!
  data: PostingUpdateWithoutOfferedByDataInput!
}

input PostingUpsertWithoutApplicationsInput {
  update: PostingUpdateWithoutApplicationsDataInput!
  create: PostingCreateWithoutApplicationsInput!
}

input PostingUpsertWithWhereUniqueWithoutOfferedByInput {
  where: PostingWhereUniqueInput!
  update: PostingUpdateWithoutOfferedByDataInput!
  create: PostingCreateWithoutOfferedByInput!
}

input PostingWhereInput {
  """Logical AND on all given filters."""
  AND: [PostingWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  customId: String

  """All values that are not equal to given value."""
  customId_not: String

  """All values that are contained in given list."""
  customId_in: [String!]

  """All values that are not contained in given list."""
  customId_not_in: [String!]

  """All values less than the given value."""
  customId_lt: String

  """All values less than or equal the given value."""
  customId_lte: String

  """All values greater than the given value."""
  customId_gt: String

  """All values greater than or equal the given value."""
  customId_gte: String

  """All values containing the given string."""
  customId_contains: String

  """All values not containing the given string."""
  customId_not_contains: String

  """All values starting with the given string."""
  customId_starts_with: String

  """All values not starting with the given string."""
  customId_not_starts_with: String

  """All values ending with the given string."""
  customId_ends_with: String

  """All values not ending with the given string."""
  customId_not_ends_with: String
  postingTitle: String

  """All values that are not equal to given value."""
  postingTitle_not: String

  """All values that are contained in given list."""
  postingTitle_in: [String!]

  """All values that are not contained in given list."""
  postingTitle_not_in: [String!]

  """All values less than the given value."""
  postingTitle_lt: String

  """All values less than or equal the given value."""
  postingTitle_lte: String

  """All values greater than the given value."""
  postingTitle_gt: String

  """All values greater than or equal the given value."""
  postingTitle_gte: String

  """All values containing the given string."""
  postingTitle_contains: String

  """All values not containing the given string."""
  postingTitle_not_contains: String

  """All values starting with the given string."""
  postingTitle_starts_with: String

  """All values not starting with the given string."""
  postingTitle_not_starts_with: String

  """All values ending with the given string."""
  postingTitle_ends_with: String

  """All values not ending with the given string."""
  postingTitle_not_ends_with: String
  positionTitle: String

  """All values that are not equal to given value."""
  positionTitle_not: String

  """All values that are contained in given list."""
  positionTitle_in: [String!]

  """All values that are not contained in given list."""
  positionTitle_not_in: [String!]

  """All values less than the given value."""
  positionTitle_lt: String

  """All values less than or equal the given value."""
  positionTitle_lte: String

  """All values greater than the given value."""
  positionTitle_gt: String

  """All values greater than or equal the given value."""
  positionTitle_gte: String

  """All values containing the given string."""
  positionTitle_contains: String

  """All values not containing the given string."""
  positionTitle_not_contains: String

  """All values starting with the given string."""
  positionTitle_starts_with: String

  """All values not starting with the given string."""
  positionTitle_not_starts_with: String

  """All values ending with the given string."""
  positionTitle_ends_with: String

  """All values not ending with the given string."""
  positionTitle_not_ends_with: String
  employmentType: EmploymentType

  """All values that are not equal to given value."""
  employmentType_not: EmploymentType

  """All values that are contained in given list."""
  employmentType_in: [EmploymentType!]

  """All values that are not contained in given list."""
  employmentType_not_in: [EmploymentType!]
  status: PostingStatus

  """All values that are not equal to given value."""
  status_not: PostingStatus

  """All values that are contained in given list."""
  status_in: [PostingStatus!]

  """All values that are not contained in given list."""
  status_not_in: [PostingStatus!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdDate: DateTime

  """All values that are not equal to given value."""
  createdDate_not: DateTime

  """All values that are contained in given list."""
  createdDate_in: [DateTime!]

  """All values that are not contained in given list."""
  createdDate_not_in: [DateTime!]

  """All values less than the given value."""
  createdDate_lt: DateTime

  """All values less than or equal the given value."""
  createdDate_lte: DateTime

  """All values greater than the given value."""
  createdDate_gt: DateTime

  """All values greater than or equal the given value."""
  createdDate_gte: DateTime
  expiresAt: DateTime

  """All values that are not equal to given value."""
  expiresAt_not: DateTime

  """All values that are contained in given list."""
  expiresAt_in: [DateTime!]

  """All values that are not contained in given list."""
  expiresAt_not_in: [DateTime!]

  """All values less than the given value."""
  expiresAt_lt: DateTime

  """All values less than or equal the given value."""
  expiresAt_lte: DateTime

  """All values greater than the given value."""
  expiresAt_gt: DateTime

  """All values greater than or equal the given value."""
  expiresAt_gte: DateTime
  offeredBy: EmployerWhereInput
  requirements_every: RequirementWhereInput
  requirements_some: RequirementWhereInput
  requirements_none: RequirementWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  minimumSalaryOffer: MoneyAmountWhereInput
  maximumSalaryOffer: MoneyAmountWhereInput
}

input PostingWhereUniqueInput {
  id: ID
  customId: String
}

type Qualification {
  field: String!
  expertise: ExpertiseLevel!
  yearsOfExperience: Float!
}

"""A connection to a list of items."""
type QualificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QualificationEdge]!
  aggregate: AggregateQualification!
}

input QualificationCreateInput {
  field: String!
  expertise: ExpertiseLevel!
  yearsOfExperience: Float!
}

"""An edge in a connection."""
type QualificationEdge {
  """The item at the end of the edge."""
  node: Qualification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QualificationOrderByInput {
  field_ASC
  field_DESC
  expertise_ASC
  expertise_DESC
  yearsOfExperience_ASC
  yearsOfExperience_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QualificationPreviousValues {
  field: String!
  expertise: ExpertiseLevel!
  yearsOfExperience: Float!
}

type QualificationSubscriptionPayload {
  mutation: MutationType!
  node: Qualification
  updatedFields: [String!]
  previousValues: QualificationPreviousValues
}

input QualificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QualificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QualificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QualificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QualificationWhereInput
}

input QualificationUpdateInput {
  field: String
  expertise: ExpertiseLevel
  yearsOfExperience: Float
}

input QualificationWhereInput {
  """Logical AND on all given filters."""
  AND: [QualificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [QualificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QualificationWhereInput!]
  field: String

  """All values that are not equal to given value."""
  field_not: String

  """All values that are contained in given list."""
  field_in: [String!]

  """All values that are not contained in given list."""
  field_not_in: [String!]

  """All values less than the given value."""
  field_lt: String

  """All values less than or equal the given value."""
  field_lte: String

  """All values greater than the given value."""
  field_gt: String

  """All values greater than or equal the given value."""
  field_gte: String

  """All values containing the given string."""
  field_contains: String

  """All values not containing the given string."""
  field_not_contains: String

  """All values starting with the given string."""
  field_starts_with: String

  """All values not starting with the given string."""
  field_not_starts_with: String

  """All values ending with the given string."""
  field_ends_with: String

  """All values not ending with the given string."""
  field_not_ends_with: String
  expertise: ExpertiseLevel

  """All values that are not equal to given value."""
  expertise_not: ExpertiseLevel

  """All values that are contained in given list."""
  expertise_in: [ExpertiseLevel!]

  """All values that are not contained in given list."""
  expertise_not_in: [ExpertiseLevel!]
  yearsOfExperience: Float

  """All values that are not equal to given value."""
  yearsOfExperience_not: Float

  """All values that are contained in given list."""
  yearsOfExperience_in: [Float!]

  """All values that are not contained in given list."""
  yearsOfExperience_not_in: [Float!]

  """All values less than the given value."""
  yearsOfExperience_lt: Float

  """All values less than or equal the given value."""
  yearsOfExperience_lte: Float

  """All values greater than the given value."""
  yearsOfExperience_gt: Float

  """All values greater than or equal the given value."""
  yearsOfExperience_gte: Float
}

type Query {
  employers(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employer]!
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  employmentProcesses(where: EmploymentProcessWhereInput, orderBy: EmploymentProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmploymentProcess]!
  postings(where: PostingWhereInput, orderBy: PostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Posting]!
  qualifications(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Qualification]!
  educations(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education]!
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement]!
  moneyAmounts(where: MoneyAmountWhereInput, orderBy: MoneyAmountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MoneyAmount]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  employer(where: EmployerWhereUniqueInput!): Employer
  application(where: ApplicationWhereUniqueInput!): Application
  employmentProcess(where: EmploymentProcessWhereUniqueInput!): EmploymentProcess
  posting(where: PostingWhereUniqueInput!): Posting
  user(where: UserWhereUniqueInput!): User
  employersConnection(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployerConnection!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  employmentProcessesConnection(where: EmploymentProcessWhereInput, orderBy: EmploymentProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmploymentProcessConnection!
  postingsConnection(where: PostingWhereInput, orderBy: PostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostingConnection!
  qualificationsConnection(where: QualificationWhereInput, orderBy: QualificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QualificationConnection!
  educationsConnection(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationConnection!
  requirementsConnection(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequirementConnection!
  moneyAmountsConnection(where: MoneyAmountWhereInput, orderBy: MoneyAmountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MoneyAmountConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Requirement {
  field: String!
  expertise: ExpertiseLevel
  yearsOfExperience: Float
}

"""A connection to a list of items."""
type RequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequirementEdge]!
  aggregate: AggregateRequirement!
}

input RequirementCreateInput {
  field: String!
  expertise: ExpertiseLevel
  yearsOfExperience: Float
}

input RequirementCreateManyInput {
  create: [RequirementCreateInput!]
}

"""An edge in a connection."""
type RequirementEdge {
  """The item at the end of the edge."""
  node: Requirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RequirementOrderByInput {
  field_ASC
  field_DESC
  expertise_ASC
  expertise_DESC
  yearsOfExperience_ASC
  yearsOfExperience_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RequirementPreviousValues {
  field: String!
  expertise: ExpertiseLevel
  yearsOfExperience: Float
}

type RequirementSubscriptionPayload {
  mutation: MutationType!
  node: Requirement
  updatedFields: [String!]
  previousValues: RequirementPreviousValues
}

input RequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequirementSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RequirementWhereInput
}

input RequirementUpdateInput {
  field: String
  expertise: ExpertiseLevel
  yearsOfExperience: Float
}

input RequirementUpdateManyInput {
  create: [RequirementCreateInput!]
}

input RequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [RequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequirementWhereInput!]
  field: String

  """All values that are not equal to given value."""
  field_not: String

  """All values that are contained in given list."""
  field_in: [String!]

  """All values that are not contained in given list."""
  field_not_in: [String!]

  """All values less than the given value."""
  field_lt: String

  """All values less than or equal the given value."""
  field_lte: String

  """All values greater than the given value."""
  field_gt: String

  """All values greater than or equal the given value."""
  field_gte: String

  """All values containing the given string."""
  field_contains: String

  """All values not containing the given string."""
  field_not_contains: String

  """All values starting with the given string."""
  field_starts_with: String

  """All values not starting with the given string."""
  field_not_starts_with: String

  """All values ending with the given string."""
  field_ends_with: String

  """All values not ending with the given string."""
  field_not_ends_with: String
  expertise: ExpertiseLevel

  """All values that are not equal to given value."""
  expertise_not: ExpertiseLevel

  """All values that are contained in given list."""
  expertise_in: [ExpertiseLevel!]

  """All values that are not contained in given list."""
  expertise_not_in: [ExpertiseLevel!]
  yearsOfExperience: Float

  """All values that are not equal to given value."""
  yearsOfExperience_not: Float

  """All values that are contained in given list."""
  yearsOfExperience_in: [Float!]

  """All values that are not contained in given list."""
  yearsOfExperience_not_in: [Float!]

  """All values less than the given value."""
  yearsOfExperience_lt: Float

  """All values less than or equal the given value."""
  yearsOfExperience_lte: Float

  """All values greater than the given value."""
  yearsOfExperience_gt: Float

  """All values greater than or equal the given value."""
  yearsOfExperience_gte: Float
}

type Subscription {
  employer(where: EmployerSubscriptionWhereInput): EmployerSubscriptionPayload
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  employmentProcess(where: EmploymentProcessSubscriptionWhereInput): EmploymentProcessSubscriptionPayload
  posting(where: PostingSubscriptionWhereInput): PostingSubscriptionPayload
  qualification(where: QualificationSubscriptionWhereInput): QualificationSubscriptionPayload
  education(where: EducationSubscriptionWhereInput): EducationSubscriptionPayload
  requirement(where: RequirementSubscriptionWhereInput): RequirementSubscriptionPayload
  moneyAmount(where: MoneyAmountSubscriptionWhereInput): MoneyAmountSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  firstName: String!
  middleNames: [String!]!
  lastName: String!
  hashedPassword: String!
  education(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education!]
  userType: UserType!
  employer(where: EmployerWhereInput): Employer
  employerAccessRights: EmployerAccessRights
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  hashedPassword: String!
  userType: UserType!
  employerAccessRights: EmployerAccessRights
  middleNames: UserCreatemiddleNamesInput
  education: EducationCreateManyInput
  employer: EmployerCreateOneWithoutUsersInput
  applications: ApplicationCreateManyWithoutApplicantInput
}

input UserCreateManyWithoutEmployerInput {
  create: [UserCreateWithoutEmployerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreatemiddleNamesInput {
  set: [String!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutApplicationsInput {
  create: UserCreateWithoutApplicationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApplicationsInput {
  email: String!
  firstName: String!
  lastName: String!
  hashedPassword: String!
  userType: UserType!
  employerAccessRights: EmployerAccessRights
  middleNames: UserCreatemiddleNamesInput
  education: EducationCreateManyInput
  employer: EmployerCreateOneWithoutUsersInput
}

input UserCreateWithoutEmployerInput {
  email: String!
  firstName: String!
  lastName: String!
  hashedPassword: String!
  userType: UserType!
  employerAccessRights: EmployerAccessRights
  middleNames: UserCreatemiddleNamesInput
  education: EducationCreateManyInput
  applications: ApplicationCreateManyWithoutApplicantInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  hashedPassword_ASC
  hashedPassword_DESC
  userType_ASC
  userType_DESC
  employerAccessRights_ASC
  employerAccessRights_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  firstName: String!
  middleNames: [String!]!
  lastName: String!
  hashedPassword: String!
  userType: UserType!
  employerAccessRights: EmployerAccessRights
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

enum UserType {
  CANDIDATE
  EMPLOYER
}

input UserUpdateDataInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  education: EducationUpdateManyInput
  employer: EmployerUpdateOneWithoutUsersInput
  applications: ApplicationUpdateManyWithoutApplicantInput
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  education: EducationUpdateManyInput
  employer: EmployerUpdateOneWithoutUsersInput
  applications: ApplicationUpdateManyWithoutApplicantInput
}

input UserUpdateManyWithoutEmployerInput {
  create: [UserCreateWithoutEmployerInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutEmployerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutEmployerInput!]
}

input UserUpdatemiddleNamesInput {
  set: [String!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutApplicationsInput {
  create: UserCreateWithoutApplicationsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutApplicationsDataInput
  upsert: UserUpsertWithoutApplicationsInput
}

input UserUpdateWithoutApplicationsDataInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  education: EducationUpdateManyInput
  employer: EmployerUpdateOneWithoutUsersInput
}

input UserUpdateWithoutEmployerDataInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  education: EducationUpdateManyInput
  applications: ApplicationUpdateManyWithoutApplicantInput
}

input UserUpdateWithWhereUniqueWithoutEmployerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEmployerDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutApplicationsInput {
  update: UserUpdateWithoutApplicationsDataInput!
  create: UserCreateWithoutApplicationsInput!
}

input UserUpsertWithWhereUniqueWithoutEmployerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEmployerDataInput!
  create: UserCreateWithoutEmployerInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  hashedPassword: String

  """All values that are not equal to given value."""
  hashedPassword_not: String

  """All values that are contained in given list."""
  hashedPassword_in: [String!]

  """All values that are not contained in given list."""
  hashedPassword_not_in: [String!]

  """All values less than the given value."""
  hashedPassword_lt: String

  """All values less than or equal the given value."""
  hashedPassword_lte: String

  """All values greater than the given value."""
  hashedPassword_gt: String

  """All values greater than or equal the given value."""
  hashedPassword_gte: String

  """All values containing the given string."""
  hashedPassword_contains: String

  """All values not containing the given string."""
  hashedPassword_not_contains: String

  """All values starting with the given string."""
  hashedPassword_starts_with: String

  """All values not starting with the given string."""
  hashedPassword_not_starts_with: String

  """All values ending with the given string."""
  hashedPassword_ends_with: String

  """All values not ending with the given string."""
  hashedPassword_not_ends_with: String
  userType: UserType

  """All values that are not equal to given value."""
  userType_not: UserType

  """All values that are contained in given list."""
  userType_in: [UserType!]

  """All values that are not contained in given list."""
  userType_not_in: [UserType!]
  employerAccessRights: EmployerAccessRights

  """All values that are not equal to given value."""
  employerAccessRights_not: EmployerAccessRights

  """All values that are contained in given list."""
  employerAccessRights_in: [EmployerAccessRights!]

  """All values that are not contained in given list."""
  employerAccessRights_not_in: [EmployerAccessRights!]
  education_every: EducationWhereInput
  education_some: EducationWhereInput
  education_none: EducationWhereInput
  employer: EmployerWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
