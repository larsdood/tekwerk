# source: https://eu1.prisma.sh/larsdood-53fd52/tekwerk-db/dev
# timestamp: Sun Oct 21 2018 18:17:14 GMT+0200 (W. Europe Summer Time)

type AggregateApplication {
  count: Int!
}

type AggregateEmployer {
  count: Int!
}

type AggregateEmploymentProcess {
  count: Int!
}

type AggregateLanguageSkill {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateMessageThread {
  count: Int!
}

type AggregatePosting {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateYearMonth {
  count: Int!
}

type Application implements Node {
  id: ID!
  posting: Posting!
  applicant: User!
  applicationLetter: String!
  status: ApplicationStatus!
}

"""A connection to a list of items."""
type ApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  applicationLetter: String!
  status: ApplicationStatus!
  posting: PostingCreateOneWithoutApplicationsInput!
  applicant: UserCreateOneWithoutApplicationsInput!
}

input ApplicationCreateManyWithoutApplicantInput {
  create: [ApplicationCreateWithoutApplicantInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateManyWithoutPostingInput {
  create: [ApplicationCreateWithoutPostingInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutApplicantInput {
  applicationLetter: String!
  status: ApplicationStatus!
  posting: PostingCreateOneWithoutApplicationsInput!
}

input ApplicationCreateWithoutPostingInput {
  applicationLetter: String!
  status: ApplicationStatus!
  applicant: UserCreateOneWithoutApplicationsInput!
}

"""An edge in a connection."""
type ApplicationEdge {
  """The item at the end of the edge."""
  node: Application!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  applicationLetter_ASC
  applicationLetter_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ApplicationPreviousValues {
  id: ID!
  applicationLetter: String!
  status: ApplicationStatus!
}

enum ApplicationStatus {
  WAITING_FOR_REVIEW
  IN_REVIEW
  REJECTED
  ACCEPTED
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ApplicationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApplicationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApplicationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
}

input ApplicationUpdateInput {
  applicationLetter: String
  status: ApplicationStatus
  posting: PostingUpdateOneRequiredWithoutApplicationsInput
  applicant: UserUpdateOneRequiredWithoutApplicationsInput
}

input ApplicationUpdateManyWithoutApplicantInput {
  create: [ApplicationCreateWithoutApplicantInput!]
  connect: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  delete: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutApplicantInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutApplicantInput!]
}

input ApplicationUpdateManyWithoutPostingInput {
  create: [ApplicationCreateWithoutPostingInput!]
  connect: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  delete: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutPostingInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutPostingInput!]
}

input ApplicationUpdateWithoutApplicantDataInput {
  applicationLetter: String
  status: ApplicationStatus
  posting: PostingUpdateOneRequiredWithoutApplicationsInput
}

input ApplicationUpdateWithoutPostingDataInput {
  applicationLetter: String
  status: ApplicationStatus
  applicant: UserUpdateOneRequiredWithoutApplicationsInput
}

input ApplicationUpdateWithWhereUniqueWithoutApplicantInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutApplicantDataInput!
}

input ApplicationUpdateWithWhereUniqueWithoutPostingInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutPostingDataInput!
}

input ApplicationUpsertWithWhereUniqueWithoutApplicantInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutApplicantDataInput!
  create: ApplicationCreateWithoutApplicantInput!
}

input ApplicationUpsertWithWhereUniqueWithoutPostingInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutPostingDataInput!
  create: ApplicationCreateWithoutPostingInput!
}

input ApplicationWhereInput {
  """Logical AND on all given filters."""
  AND: [ApplicationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApplicationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApplicationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  applicationLetter: String

  """All values that are not equal to given value."""
  applicationLetter_not: String

  """All values that are contained in given list."""
  applicationLetter_in: [String!]

  """All values that are not contained in given list."""
  applicationLetter_not_in: [String!]

  """All values less than the given value."""
  applicationLetter_lt: String

  """All values less than or equal the given value."""
  applicationLetter_lte: String

  """All values greater than the given value."""
  applicationLetter_gt: String

  """All values greater than or equal the given value."""
  applicationLetter_gte: String

  """All values containing the given string."""
  applicationLetter_contains: String

  """All values not containing the given string."""
  applicationLetter_not_contains: String

  """All values starting with the given string."""
  applicationLetter_starts_with: String

  """All values not starting with the given string."""
  applicationLetter_not_starts_with: String

  """All values ending with the given string."""
  applicationLetter_ends_with: String

  """All values not ending with the given string."""
  applicationLetter_not_ends_with: String
  status: ApplicationStatus

  """All values that are not equal to given value."""
  status_not: ApplicationStatus

  """All values that are contained in given list."""
  status_in: [ApplicationStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ApplicationStatus!]
  posting: PostingWhereInput
  applicant: UserWhereInput
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Employer implements Node {
  id: ID!
  contactEmail: String!
  companyName: String!
  country: String
  city: String
  website: String
  logoUrl: String
  postings(where: PostingWhereInput, orderBy: PostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Posting!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  processes(where: EmploymentProcessWhereInput, orderBy: EmploymentProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmploymentProcess!]
}

enum EmployerAccessRights {
  ADMIN
  EDITOR
}

"""A connection to a list of items."""
type EmployerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployerEdge]!
  aggregate: AggregateEmployer!
}

input EmployerCreateInput {
  contactEmail: String!
  companyName: String!
  country: String
  city: String
  website: String
  logoUrl: String
  postings: PostingCreateManyWithoutOfferedByInput
  users: UserCreateManyWithoutEmployerInput
  processes: EmploymentProcessCreateManyWithoutEmployerInput
}

input EmployerCreateOneWithoutPostingsInput {
  create: EmployerCreateWithoutPostingsInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateOneWithoutProcessesInput {
  create: EmployerCreateWithoutProcessesInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateOneWithoutUsersInput {
  create: EmployerCreateWithoutUsersInput
  connect: EmployerWhereUniqueInput
}

input EmployerCreateWithoutPostingsInput {
  contactEmail: String!
  companyName: String!
  country: String
  city: String
  website: String
  logoUrl: String
  users: UserCreateManyWithoutEmployerInput
  processes: EmploymentProcessCreateManyWithoutEmployerInput
}

input EmployerCreateWithoutProcessesInput {
  contactEmail: String!
  companyName: String!
  country: String
  city: String
  website: String
  logoUrl: String
  postings: PostingCreateManyWithoutOfferedByInput
  users: UserCreateManyWithoutEmployerInput
}

input EmployerCreateWithoutUsersInput {
  contactEmail: String!
  companyName: String!
  country: String
  city: String
  website: String
  logoUrl: String
  postings: PostingCreateManyWithoutOfferedByInput
  processes: EmploymentProcessCreateManyWithoutEmployerInput
}

"""An edge in a connection."""
type EmployerEdge {
  """The item at the end of the edge."""
  node: Employer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmployerOrderByInput {
  id_ASC
  id_DESC
  contactEmail_ASC
  contactEmail_DESC
  companyName_ASC
  companyName_DESC
  country_ASC
  country_DESC
  city_ASC
  city_DESC
  website_ASC
  website_DESC
  logoUrl_ASC
  logoUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmployerPreviousValues {
  id: ID!
  contactEmail: String!
  companyName: String!
  country: String
  city: String
  website: String
  logoUrl: String
}

type EmployerSubscriptionPayload {
  mutation: MutationType!
  node: Employer
  updatedFields: [String!]
  previousValues: EmployerPreviousValues
}

input EmployerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmployerWhereInput
}

input EmployerUpdateInput {
  contactEmail: String
  companyName: String
  country: String
  city: String
  website: String
  logoUrl: String
  postings: PostingUpdateManyWithoutOfferedByInput
  users: UserUpdateManyWithoutEmployerInput
  processes: EmploymentProcessUpdateManyWithoutEmployerInput
}

input EmployerUpdateOneRequiredWithoutPostingsInput {
  create: EmployerCreateWithoutPostingsInput
  connect: EmployerWhereUniqueInput
  update: EmployerUpdateWithoutPostingsDataInput
  upsert: EmployerUpsertWithoutPostingsInput
}

input EmployerUpdateOneRequiredWithoutProcessesInput {
  create: EmployerCreateWithoutProcessesInput
  connect: EmployerWhereUniqueInput
  update: EmployerUpdateWithoutProcessesDataInput
  upsert: EmployerUpsertWithoutProcessesInput
}

input EmployerUpdateOneWithoutUsersInput {
  create: EmployerCreateWithoutUsersInput
  connect: EmployerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EmployerUpdateWithoutUsersDataInput
  upsert: EmployerUpsertWithoutUsersInput
}

input EmployerUpdateWithoutPostingsDataInput {
  contactEmail: String
  companyName: String
  country: String
  city: String
  website: String
  logoUrl: String
  users: UserUpdateManyWithoutEmployerInput
  processes: EmploymentProcessUpdateManyWithoutEmployerInput
}

input EmployerUpdateWithoutProcessesDataInput {
  contactEmail: String
  companyName: String
  country: String
  city: String
  website: String
  logoUrl: String
  postings: PostingUpdateManyWithoutOfferedByInput
  users: UserUpdateManyWithoutEmployerInput
}

input EmployerUpdateWithoutUsersDataInput {
  contactEmail: String
  companyName: String
  country: String
  city: String
  website: String
  logoUrl: String
  postings: PostingUpdateManyWithoutOfferedByInput
  processes: EmploymentProcessUpdateManyWithoutEmployerInput
}

input EmployerUpsertWithoutPostingsInput {
  update: EmployerUpdateWithoutPostingsDataInput!
  create: EmployerCreateWithoutPostingsInput!
}

input EmployerUpsertWithoutProcessesInput {
  update: EmployerUpdateWithoutProcessesDataInput!
  create: EmployerCreateWithoutProcessesInput!
}

input EmployerUpsertWithoutUsersInput {
  update: EmployerUpdateWithoutUsersDataInput!
  create: EmployerCreateWithoutUsersInput!
}

input EmployerWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployerWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contactEmail: String

  """All values that are not equal to given value."""
  contactEmail_not: String

  """All values that are contained in given list."""
  contactEmail_in: [String!]

  """All values that are not contained in given list."""
  contactEmail_not_in: [String!]

  """All values less than the given value."""
  contactEmail_lt: String

  """All values less than or equal the given value."""
  contactEmail_lte: String

  """All values greater than the given value."""
  contactEmail_gt: String

  """All values greater than or equal the given value."""
  contactEmail_gte: String

  """All values containing the given string."""
  contactEmail_contains: String

  """All values not containing the given string."""
  contactEmail_not_contains: String

  """All values starting with the given string."""
  contactEmail_starts_with: String

  """All values not starting with the given string."""
  contactEmail_not_starts_with: String

  """All values ending with the given string."""
  contactEmail_ends_with: String

  """All values not ending with the given string."""
  contactEmail_not_ends_with: String
  companyName: String

  """All values that are not equal to given value."""
  companyName_not: String

  """All values that are contained in given list."""
  companyName_in: [String!]

  """All values that are not contained in given list."""
  companyName_not_in: [String!]

  """All values less than the given value."""
  companyName_lt: String

  """All values less than or equal the given value."""
  companyName_lte: String

  """All values greater than the given value."""
  companyName_gt: String

  """All values greater than or equal the given value."""
  companyName_gte: String

  """All values containing the given string."""
  companyName_contains: String

  """All values not containing the given string."""
  companyName_not_contains: String

  """All values starting with the given string."""
  companyName_starts_with: String

  """All values not starting with the given string."""
  companyName_not_starts_with: String

  """All values ending with the given string."""
  companyName_ends_with: String

  """All values not ending with the given string."""
  companyName_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  website: String

  """All values that are not equal to given value."""
  website_not: String

  """All values that are contained in given list."""
  website_in: [String!]

  """All values that are not contained in given list."""
  website_not_in: [String!]

  """All values less than the given value."""
  website_lt: String

  """All values less than or equal the given value."""
  website_lte: String

  """All values greater than the given value."""
  website_gt: String

  """All values greater than or equal the given value."""
  website_gte: String

  """All values containing the given string."""
  website_contains: String

  """All values not containing the given string."""
  website_not_contains: String

  """All values starting with the given string."""
  website_starts_with: String

  """All values not starting with the given string."""
  website_not_starts_with: String

  """All values ending with the given string."""
  website_ends_with: String

  """All values not ending with the given string."""
  website_not_ends_with: String
  logoUrl: String

  """All values that are not equal to given value."""
  logoUrl_not: String

  """All values that are contained in given list."""
  logoUrl_in: [String!]

  """All values that are not contained in given list."""
  logoUrl_not_in: [String!]

  """All values less than the given value."""
  logoUrl_lt: String

  """All values less than or equal the given value."""
  logoUrl_lte: String

  """All values greater than the given value."""
  logoUrl_gt: String

  """All values greater than or equal the given value."""
  logoUrl_gte: String

  """All values containing the given string."""
  logoUrl_contains: String

  """All values not containing the given string."""
  logoUrl_not_contains: String

  """All values starting with the given string."""
  logoUrl_starts_with: String

  """All values not starting with the given string."""
  logoUrl_not_starts_with: String

  """All values ending with the given string."""
  logoUrl_ends_with: String

  """All values not ending with the given string."""
  logoUrl_not_ends_with: String
  postings_every: PostingWhereInput
  postings_some: PostingWhereInput
  postings_none: PostingWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  processes_every: EmploymentProcessWhereInput
  processes_some: EmploymentProcessWhereInput
  processes_none: EmploymentProcessWhereInput
}

input EmployerWhereUniqueInput {
  id: ID
  contactEmail: String
  companyName: String
}

type EmploymentProcess implements Node {
  id: ID!
  candidate: User!
  employer: Employer!
}

"""A connection to a list of items."""
type EmploymentProcessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmploymentProcessEdge]!
  aggregate: AggregateEmploymentProcess!
}

input EmploymentProcessCreateInput {
  candidate: UserCreateOneInput!
  employer: EmployerCreateOneWithoutProcessesInput!
}

input EmploymentProcessCreateManyWithoutEmployerInput {
  create: [EmploymentProcessCreateWithoutEmployerInput!]
  connect: [EmploymentProcessWhereUniqueInput!]
}

input EmploymentProcessCreateWithoutEmployerInput {
  candidate: UserCreateOneInput!
}

"""An edge in a connection."""
type EmploymentProcessEdge {
  """The item at the end of the edge."""
  node: EmploymentProcess!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmploymentProcessOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EmploymentProcessPreviousValues {
  id: ID!
}

type EmploymentProcessSubscriptionPayload {
  mutation: MutationType!
  node: EmploymentProcess
  updatedFields: [String!]
  previousValues: EmploymentProcessPreviousValues
}

input EmploymentProcessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmploymentProcessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmploymentProcessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmploymentProcessSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmploymentProcessWhereInput
}

input EmploymentProcessUpdateInput {
  candidate: UserUpdateOneRequiredInput
  employer: EmployerUpdateOneRequiredWithoutProcessesInput
}

input EmploymentProcessUpdateManyWithoutEmployerInput {
  create: [EmploymentProcessCreateWithoutEmployerInput!]
  connect: [EmploymentProcessWhereUniqueInput!]
  disconnect: [EmploymentProcessWhereUniqueInput!]
  delete: [EmploymentProcessWhereUniqueInput!]
  update: [EmploymentProcessUpdateWithWhereUniqueWithoutEmployerInput!]
  upsert: [EmploymentProcessUpsertWithWhereUniqueWithoutEmployerInput!]
}

input EmploymentProcessUpdateWithoutEmployerDataInput {
  candidate: UserUpdateOneRequiredInput
}

input EmploymentProcessUpdateWithWhereUniqueWithoutEmployerInput {
  where: EmploymentProcessWhereUniqueInput!
  data: EmploymentProcessUpdateWithoutEmployerDataInput!
}

input EmploymentProcessUpsertWithWhereUniqueWithoutEmployerInput {
  where: EmploymentProcessWhereUniqueInput!
  update: EmploymentProcessUpdateWithoutEmployerDataInput!
  create: EmploymentProcessCreateWithoutEmployerInput!
}

input EmploymentProcessWhereInput {
  """Logical AND on all given filters."""
  AND: [EmploymentProcessWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmploymentProcessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmploymentProcessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  candidate: UserWhereInput
  employer: EmployerWhereInput
}

input EmploymentProcessWhereUniqueInput {
  id: ID
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACTOR
}

enum LanguageProficiencyLevel {
  NATIVE
  FLUENT
  BUSINESS
  INTERMEDIATE
  ELEMENTARY
}

type LanguageSkill {
  languageName: String!
  profifiencyLevel: LanguageProficiencyLevel!
}

"""A connection to a list of items."""
type LanguageSkillConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LanguageSkillEdge]!
  aggregate: AggregateLanguageSkill!
}

input LanguageSkillCreateInput {
  languageName: String!
  profifiencyLevel: LanguageProficiencyLevel!
}

"""An edge in a connection."""
type LanguageSkillEdge {
  """The item at the end of the edge."""
  node: LanguageSkill!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LanguageSkillOrderByInput {
  languageName_ASC
  languageName_DESC
  profifiencyLevel_ASC
  profifiencyLevel_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LanguageSkillPreviousValues {
  languageName: String!
  profifiencyLevel: LanguageProficiencyLevel!
}

type LanguageSkillSubscriptionPayload {
  mutation: MutationType!
  node: LanguageSkill
  updatedFields: [String!]
  previousValues: LanguageSkillPreviousValues
}

input LanguageSkillSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageSkillSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageSkillSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageSkillSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LanguageSkillWhereInput
}

input LanguageSkillUpdateInput {
  languageName: String
  profifiencyLevel: LanguageProficiencyLevel
}

input LanguageSkillWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageSkillWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageSkillWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageSkillWhereInput!]
  languageName: String

  """All values that are not equal to given value."""
  languageName_not: String

  """All values that are contained in given list."""
  languageName_in: [String!]

  """All values that are not contained in given list."""
  languageName_not_in: [String!]

  """All values less than the given value."""
  languageName_lt: String

  """All values less than or equal the given value."""
  languageName_lte: String

  """All values greater than the given value."""
  languageName_gt: String

  """All values greater than or equal the given value."""
  languageName_gte: String

  """All values containing the given string."""
  languageName_contains: String

  """All values not containing the given string."""
  languageName_not_contains: String

  """All values starting with the given string."""
  languageName_starts_with: String

  """All values not starting with the given string."""
  languageName_not_starts_with: String

  """All values ending with the given string."""
  languageName_ends_with: String

  """All values not ending with the given string."""
  languageName_not_ends_with: String
  profifiencyLevel: LanguageProficiencyLevel

  """All values that are not equal to given value."""
  profifiencyLevel_not: LanguageProficiencyLevel

  """All values that are contained in given list."""
  profifiencyLevel_in: [LanguageProficiencyLevel!]

  """All values that are not contained in given list."""
  profifiencyLevel_not_in: [LanguageProficiencyLevel!]
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Message {
  from: User!
  to: User!
  sentAt: DateTime!
  readAt: DateTime
  message: String!
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  sentAt: DateTime!
  readAt: DateTime
  message: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
}

input MessageCreateManyInput {
  create: [MessageCreateInput!]
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageOrderByInput {
  sentAt_ASC
  sentAt_DESC
  readAt_ASC
  readAt_DESC
  message_ASC
  message_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  sentAt: DateTime!
  readAt: DateTime
  message: String!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

type MessageThread implements Node {
  id: ID!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

"""A connection to a list of items."""
type MessageThreadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageThreadEdge]!
  aggregate: AggregateMessageThread!
}

input MessageThreadCreateInput {
  users: UserCreateManyWithoutMessageThreadsInput
  messages: MessageCreateManyInput
}

input MessageThreadCreateManyWithoutUsersInput {
  create: [MessageThreadCreateWithoutUsersInput!]
  connect: [MessageThreadWhereUniqueInput!]
}

input MessageThreadCreateWithoutUsersInput {
  messages: MessageCreateManyInput
}

"""An edge in a connection."""
type MessageThreadEdge {
  """The item at the end of the edge."""
  node: MessageThread!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageThreadOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessageThreadPreviousValues {
  id: ID!
}

type MessageThreadSubscriptionPayload {
  mutation: MutationType!
  node: MessageThread
  updatedFields: [String!]
  previousValues: MessageThreadPreviousValues
}

input MessageThreadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageThreadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageThreadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageThreadSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageThreadWhereInput
}

input MessageThreadUpdateInput {
  users: UserUpdateManyWithoutMessageThreadsInput
  messages: MessageUpdateManyInput
}

input MessageThreadUpdateManyWithoutUsersInput {
  create: [MessageThreadCreateWithoutUsersInput!]
  connect: [MessageThreadWhereUniqueInput!]
  disconnect: [MessageThreadWhereUniqueInput!]
  delete: [MessageThreadWhereUniqueInput!]
  update: [MessageThreadUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [MessageThreadUpsertWithWhereUniqueWithoutUsersInput!]
}

input MessageThreadUpdateWithoutUsersDataInput {
  messages: MessageUpdateManyInput
}

input MessageThreadUpdateWithWhereUniqueWithoutUsersInput {
  where: MessageThreadWhereUniqueInput!
  data: MessageThreadUpdateWithoutUsersDataInput!
}

input MessageThreadUpsertWithWhereUniqueWithoutUsersInput {
  where: MessageThreadWhereUniqueInput!
  update: MessageThreadUpdateWithoutUsersDataInput!
  create: MessageThreadCreateWithoutUsersInput!
}

input MessageThreadWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageThreadWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageThreadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageThreadWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
}

input MessageThreadWhereUniqueInput {
  id: ID
}

input MessageUpdateInput {
  sentAt: DateTime
  readAt: DateTime
  message: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
}

input MessageUpdateManyInput {
  create: [MessageCreateInput!]
}

input MessageWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageWhereInput!]
  sentAt: DateTime

  """All values that are not equal to given value."""
  sentAt_not: DateTime

  """All values that are contained in given list."""
  sentAt_in: [DateTime!]

  """All values that are not contained in given list."""
  sentAt_not_in: [DateTime!]

  """All values less than the given value."""
  sentAt_lt: DateTime

  """All values less than or equal the given value."""
  sentAt_lte: DateTime

  """All values greater than the given value."""
  sentAt_gt: DateTime

  """All values greater than or equal the given value."""
  sentAt_gte: DateTime
  readAt: DateTime

  """All values that are not equal to given value."""
  readAt_not: DateTime

  """All values that are contained in given list."""
  readAt_in: [DateTime!]

  """All values that are not contained in given list."""
  readAt_not_in: [DateTime!]

  """All values less than the given value."""
  readAt_lt: DateTime

  """All values less than or equal the given value."""
  readAt_lte: DateTime

  """All values greater than the given value."""
  readAt_gt: DateTime

  """All values greater than or equal the given value."""
  readAt_gte: DateTime
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  from: UserWhereInput
  to: UserWhereInput
}

type Mutation {
  createEmployer(data: EmployerCreateInput!): Employer!
  createApplication(data: ApplicationCreateInput!): Application!
  createEmploymentProcess(data: EmploymentProcessCreateInput!): EmploymentProcess!
  createPosting(data: PostingCreateInput!): Posting!
  createMessageThread(data: MessageThreadCreateInput!): MessageThread!
  createYearMonth(data: YearMonthCreateInput!): YearMonth!
  createLanguageSkill(data: LanguageSkillCreateInput!): LanguageSkill!
  createMessage(data: MessageCreateInput!): Message!
  createUser(data: UserCreateInput!): User!
  updateEmployer(data: EmployerUpdateInput!, where: EmployerWhereUniqueInput!): Employer
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateEmploymentProcess(data: EmploymentProcessUpdateInput!, where: EmploymentProcessWhereUniqueInput!): EmploymentProcess
  updatePosting(data: PostingUpdateInput!, where: PostingWhereUniqueInput!): Posting
  updateMessageThread(data: MessageThreadUpdateInput!, where: MessageThreadWhereUniqueInput!): MessageThread
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEmployer(where: EmployerWhereUniqueInput!): Employer
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteEmploymentProcess(where: EmploymentProcessWhereUniqueInput!): EmploymentProcess
  deletePosting(where: PostingWhereUniqueInput!): Posting
  deleteMessageThread(where: MessageThreadWhereUniqueInput!): MessageThread
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEmployer(where: EmployerWhereUniqueInput!, create: EmployerCreateInput!, update: EmployerUpdateInput!): Employer!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  upsertEmploymentProcess(where: EmploymentProcessWhereUniqueInput!, create: EmploymentProcessCreateInput!, update: EmploymentProcessUpdateInput!): EmploymentProcess!
  upsertPosting(where: PostingWhereUniqueInput!, create: PostingCreateInput!, update: PostingUpdateInput!): Posting!
  upsertMessageThread(where: MessageThreadWhereUniqueInput!, create: MessageThreadCreateInput!, update: MessageThreadUpdateInput!): MessageThread!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEmployers(data: EmployerUpdateInput!, where: EmployerWhereInput): BatchPayload!
  updateManyApplications(data: ApplicationUpdateInput!, where: ApplicationWhereInput): BatchPayload!
  updateManyEmploymentProcesses(data: EmploymentProcessUpdateInput!, where: EmploymentProcessWhereInput): BatchPayload!
  updateManyPostings(data: PostingUpdateInput!, where: PostingWhereInput): BatchPayload!
  updateManyMessageThreads(data: MessageThreadUpdateInput!, where: MessageThreadWhereInput): BatchPayload!
  updateManyYearMonths(data: YearMonthUpdateInput!, where: YearMonthWhereInput): BatchPayload!
  updateManyLanguageSkills(data: LanguageSkillUpdateInput!, where: LanguageSkillWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyEmployers(where: EmployerWhereInput): BatchPayload!
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  deleteManyEmploymentProcesses(where: EmploymentProcessWhereInput): BatchPayload!
  deleteManyPostings(where: PostingWhereInput): BatchPayload!
  deleteManyMessageThreads(where: MessageThreadWhereInput): BatchPayload!
  deleteManyYearMonths(where: YearMonthWhereInput): BatchPayload!
  deleteManyLanguageSkills(where: LanguageSkillWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Posting implements Node {
  id: ID!
  customId: String!
  postingTitle: String!
  positionTitle: String!
  country: String!
  city: String
  employmentType: EmploymentType!
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String!
  niceToHave: String
  tags: [String!]!
  releaseAt: DateTime
  expiresAt: DateTime!
  offeredBy: Employer!
  status: PostingStatus!
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  createdDate: DateTime!
}

"""A connection to a list of items."""
type PostingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostingEdge]!
  aggregate: AggregatePosting!
}

input PostingCreateInput {
  customId: String!
  postingTitle: String!
  positionTitle: String!
  country: String!
  city: String
  employmentType: EmploymentType!
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String!
  niceToHave: String
  releaseAt: DateTime
  expiresAt: DateTime!
  status: PostingStatus!
  createdDate: DateTime!
  tags: PostingCreatetagsInput
  offeredBy: EmployerCreateOneWithoutPostingsInput!
  applications: ApplicationCreateManyWithoutPostingInput
}

input PostingCreateManyWithoutOfferedByInput {
  create: [PostingCreateWithoutOfferedByInput!]
  connect: [PostingWhereUniqueInput!]
}

input PostingCreateOneWithoutApplicationsInput {
  create: PostingCreateWithoutApplicationsInput
  connect: PostingWhereUniqueInput
}

input PostingCreatetagsInput {
  set: [String!]
}

input PostingCreateWithoutApplicationsInput {
  customId: String!
  postingTitle: String!
  positionTitle: String!
  country: String!
  city: String
  employmentType: EmploymentType!
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String!
  niceToHave: String
  releaseAt: DateTime
  expiresAt: DateTime!
  status: PostingStatus!
  createdDate: DateTime!
  tags: PostingCreatetagsInput
  offeredBy: EmployerCreateOneWithoutPostingsInput!
}

input PostingCreateWithoutOfferedByInput {
  customId: String!
  postingTitle: String!
  positionTitle: String!
  country: String!
  city: String
  employmentType: EmploymentType!
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String!
  niceToHave: String
  releaseAt: DateTime
  expiresAt: DateTime!
  status: PostingStatus!
  createdDate: DateTime!
  tags: PostingCreatetagsInput
  applications: ApplicationCreateManyWithoutPostingInput
}

"""An edge in a connection."""
type PostingEdge {
  """The item at the end of the edge."""
  node: Posting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostingOrderByInput {
  id_ASC
  id_DESC
  customId_ASC
  customId_DESC
  postingTitle_ASC
  postingTitle_DESC
  positionTitle_ASC
  positionTitle_DESC
  country_ASC
  country_DESC
  city_ASC
  city_DESC
  employmentType_ASC
  employmentType_DESC
  description_ASC
  description_DESC
  minimumSalary_ASC
  minimumSalary_DESC
  maximumSalary_ASC
  maximumSalary_DESC
  currency_ASC
  currency_DESC
  workingHoursFrom_ASC
  workingHoursFrom_DESC
  workingHoursTo_ASC
  workingHoursTo_DESC
  vacationDays_ASC
  vacationDays_DESC
  minimumEducation_ASC
  minimumEducation_DESC
  minimumExperience_ASC
  minimumExperience_DESC
  internationalOK_ASC
  internationalOK_DESC
  hasRelocationAllowance_ASC
  hasRelocationAllowance_DESC
  requirements_ASC
  requirements_DESC
  niceToHave_ASC
  niceToHave_DESC
  releaseAt_ASC
  releaseAt_DESC
  expiresAt_ASC
  expiresAt_DESC
  status_ASC
  status_DESC
  createdDate_ASC
  createdDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostingPreviousValues {
  id: ID!
  customId: String!
  postingTitle: String!
  positionTitle: String!
  country: String!
  city: String
  employmentType: EmploymentType!
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String!
  niceToHave: String
  tags: [String!]!
  releaseAt: DateTime
  expiresAt: DateTime!
  status: PostingStatus!
  createdDate: DateTime!
}

enum PostingStatus {
  ACTIVE
  ARCHIVED
  UPCOMING
}

type PostingSubscriptionPayload {
  mutation: MutationType!
  node: Posting
  updatedFields: [String!]
  previousValues: PostingPreviousValues
}

input PostingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostingWhereInput
}

input PostingUpdateInput {
  customId: String
  postingTitle: String
  positionTitle: String
  country: String
  city: String
  employmentType: EmploymentType
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String
  niceToHave: String
  releaseAt: DateTime
  expiresAt: DateTime
  status: PostingStatus
  createdDate: DateTime
  tags: PostingUpdatetagsInput
  offeredBy: EmployerUpdateOneRequiredWithoutPostingsInput
  applications: ApplicationUpdateManyWithoutPostingInput
}

input PostingUpdateManyWithoutOfferedByInput {
  create: [PostingCreateWithoutOfferedByInput!]
  connect: [PostingWhereUniqueInput!]
  disconnect: [PostingWhereUniqueInput!]
  delete: [PostingWhereUniqueInput!]
  update: [PostingUpdateWithWhereUniqueWithoutOfferedByInput!]
  upsert: [PostingUpsertWithWhereUniqueWithoutOfferedByInput!]
}

input PostingUpdateOneRequiredWithoutApplicationsInput {
  create: PostingCreateWithoutApplicationsInput
  connect: PostingWhereUniqueInput
  update: PostingUpdateWithoutApplicationsDataInput
  upsert: PostingUpsertWithoutApplicationsInput
}

input PostingUpdatetagsInput {
  set: [String!]
}

input PostingUpdateWithoutApplicationsDataInput {
  customId: String
  postingTitle: String
  positionTitle: String
  country: String
  city: String
  employmentType: EmploymentType
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String
  niceToHave: String
  releaseAt: DateTime
  expiresAt: DateTime
  status: PostingStatus
  createdDate: DateTime
  tags: PostingUpdatetagsInput
  offeredBy: EmployerUpdateOneRequiredWithoutPostingsInput
}

input PostingUpdateWithoutOfferedByDataInput {
  customId: String
  postingTitle: String
  positionTitle: String
  country: String
  city: String
  employmentType: EmploymentType
  description: String
  minimumSalary: Int
  maximumSalary: Int
  currency: String
  workingHoursFrom: String
  workingHoursTo: String
  vacationDays: Int
  minimumEducation: String
  minimumExperience: String
  internationalOK: Boolean
  hasRelocationAllowance: Boolean
  requirements: String
  niceToHave: String
  releaseAt: DateTime
  expiresAt: DateTime
  status: PostingStatus
  createdDate: DateTime
  tags: PostingUpdatetagsInput
  applications: ApplicationUpdateManyWithoutPostingInput
}

input PostingUpdateWithWhereUniqueWithoutOfferedByInput {
  where: PostingWhereUniqueInput!
  data: PostingUpdateWithoutOfferedByDataInput!
}

input PostingUpsertWithoutApplicationsInput {
  update: PostingUpdateWithoutApplicationsDataInput!
  create: PostingCreateWithoutApplicationsInput!
}

input PostingUpsertWithWhereUniqueWithoutOfferedByInput {
  where: PostingWhereUniqueInput!
  update: PostingUpdateWithoutOfferedByDataInput!
  create: PostingCreateWithoutOfferedByInput!
}

input PostingWhereInput {
  """Logical AND on all given filters."""
  AND: [PostingWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  customId: String

  """All values that are not equal to given value."""
  customId_not: String

  """All values that are contained in given list."""
  customId_in: [String!]

  """All values that are not contained in given list."""
  customId_not_in: [String!]

  """All values less than the given value."""
  customId_lt: String

  """All values less than or equal the given value."""
  customId_lte: String

  """All values greater than the given value."""
  customId_gt: String

  """All values greater than or equal the given value."""
  customId_gte: String

  """All values containing the given string."""
  customId_contains: String

  """All values not containing the given string."""
  customId_not_contains: String

  """All values starting with the given string."""
  customId_starts_with: String

  """All values not starting with the given string."""
  customId_not_starts_with: String

  """All values ending with the given string."""
  customId_ends_with: String

  """All values not ending with the given string."""
  customId_not_ends_with: String
  postingTitle: String

  """All values that are not equal to given value."""
  postingTitle_not: String

  """All values that are contained in given list."""
  postingTitle_in: [String!]

  """All values that are not contained in given list."""
  postingTitle_not_in: [String!]

  """All values less than the given value."""
  postingTitle_lt: String

  """All values less than or equal the given value."""
  postingTitle_lte: String

  """All values greater than the given value."""
  postingTitle_gt: String

  """All values greater than or equal the given value."""
  postingTitle_gte: String

  """All values containing the given string."""
  postingTitle_contains: String

  """All values not containing the given string."""
  postingTitle_not_contains: String

  """All values starting with the given string."""
  postingTitle_starts_with: String

  """All values not starting with the given string."""
  postingTitle_not_starts_with: String

  """All values ending with the given string."""
  postingTitle_ends_with: String

  """All values not ending with the given string."""
  postingTitle_not_ends_with: String
  positionTitle: String

  """All values that are not equal to given value."""
  positionTitle_not: String

  """All values that are contained in given list."""
  positionTitle_in: [String!]

  """All values that are not contained in given list."""
  positionTitle_not_in: [String!]

  """All values less than the given value."""
  positionTitle_lt: String

  """All values less than or equal the given value."""
  positionTitle_lte: String

  """All values greater than the given value."""
  positionTitle_gt: String

  """All values greater than or equal the given value."""
  positionTitle_gte: String

  """All values containing the given string."""
  positionTitle_contains: String

  """All values not containing the given string."""
  positionTitle_not_contains: String

  """All values starting with the given string."""
  positionTitle_starts_with: String

  """All values not starting with the given string."""
  positionTitle_not_starts_with: String

  """All values ending with the given string."""
  positionTitle_ends_with: String

  """All values not ending with the given string."""
  positionTitle_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  employmentType: EmploymentType

  """All values that are not equal to given value."""
  employmentType_not: EmploymentType

  """All values that are contained in given list."""
  employmentType_in: [EmploymentType!]

  """All values that are not contained in given list."""
  employmentType_not_in: [EmploymentType!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  minimumSalary: Int

  """All values that are not equal to given value."""
  minimumSalary_not: Int

  """All values that are contained in given list."""
  minimumSalary_in: [Int!]

  """All values that are not contained in given list."""
  minimumSalary_not_in: [Int!]

  """All values less than the given value."""
  minimumSalary_lt: Int

  """All values less than or equal the given value."""
  minimumSalary_lte: Int

  """All values greater than the given value."""
  minimumSalary_gt: Int

  """All values greater than or equal the given value."""
  minimumSalary_gte: Int
  maximumSalary: Int

  """All values that are not equal to given value."""
  maximumSalary_not: Int

  """All values that are contained in given list."""
  maximumSalary_in: [Int!]

  """All values that are not contained in given list."""
  maximumSalary_not_in: [Int!]

  """All values less than the given value."""
  maximumSalary_lt: Int

  """All values less than or equal the given value."""
  maximumSalary_lte: Int

  """All values greater than the given value."""
  maximumSalary_gt: Int

  """All values greater than or equal the given value."""
  maximumSalary_gte: Int
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  workingHoursFrom: String

  """All values that are not equal to given value."""
  workingHoursFrom_not: String

  """All values that are contained in given list."""
  workingHoursFrom_in: [String!]

  """All values that are not contained in given list."""
  workingHoursFrom_not_in: [String!]

  """All values less than the given value."""
  workingHoursFrom_lt: String

  """All values less than or equal the given value."""
  workingHoursFrom_lte: String

  """All values greater than the given value."""
  workingHoursFrom_gt: String

  """All values greater than or equal the given value."""
  workingHoursFrom_gte: String

  """All values containing the given string."""
  workingHoursFrom_contains: String

  """All values not containing the given string."""
  workingHoursFrom_not_contains: String

  """All values starting with the given string."""
  workingHoursFrom_starts_with: String

  """All values not starting with the given string."""
  workingHoursFrom_not_starts_with: String

  """All values ending with the given string."""
  workingHoursFrom_ends_with: String

  """All values not ending with the given string."""
  workingHoursFrom_not_ends_with: String
  workingHoursTo: String

  """All values that are not equal to given value."""
  workingHoursTo_not: String

  """All values that are contained in given list."""
  workingHoursTo_in: [String!]

  """All values that are not contained in given list."""
  workingHoursTo_not_in: [String!]

  """All values less than the given value."""
  workingHoursTo_lt: String

  """All values less than or equal the given value."""
  workingHoursTo_lte: String

  """All values greater than the given value."""
  workingHoursTo_gt: String

  """All values greater than or equal the given value."""
  workingHoursTo_gte: String

  """All values containing the given string."""
  workingHoursTo_contains: String

  """All values not containing the given string."""
  workingHoursTo_not_contains: String

  """All values starting with the given string."""
  workingHoursTo_starts_with: String

  """All values not starting with the given string."""
  workingHoursTo_not_starts_with: String

  """All values ending with the given string."""
  workingHoursTo_ends_with: String

  """All values not ending with the given string."""
  workingHoursTo_not_ends_with: String
  vacationDays: Int

  """All values that are not equal to given value."""
  vacationDays_not: Int

  """All values that are contained in given list."""
  vacationDays_in: [Int!]

  """All values that are not contained in given list."""
  vacationDays_not_in: [Int!]

  """All values less than the given value."""
  vacationDays_lt: Int

  """All values less than or equal the given value."""
  vacationDays_lte: Int

  """All values greater than the given value."""
  vacationDays_gt: Int

  """All values greater than or equal the given value."""
  vacationDays_gte: Int
  minimumEducation: String

  """All values that are not equal to given value."""
  minimumEducation_not: String

  """All values that are contained in given list."""
  minimumEducation_in: [String!]

  """All values that are not contained in given list."""
  minimumEducation_not_in: [String!]

  """All values less than the given value."""
  minimumEducation_lt: String

  """All values less than or equal the given value."""
  minimumEducation_lte: String

  """All values greater than the given value."""
  minimumEducation_gt: String

  """All values greater than or equal the given value."""
  minimumEducation_gte: String

  """All values containing the given string."""
  minimumEducation_contains: String

  """All values not containing the given string."""
  minimumEducation_not_contains: String

  """All values starting with the given string."""
  minimumEducation_starts_with: String

  """All values not starting with the given string."""
  minimumEducation_not_starts_with: String

  """All values ending with the given string."""
  minimumEducation_ends_with: String

  """All values not ending with the given string."""
  minimumEducation_not_ends_with: String
  minimumExperience: String

  """All values that are not equal to given value."""
  minimumExperience_not: String

  """All values that are contained in given list."""
  minimumExperience_in: [String!]

  """All values that are not contained in given list."""
  minimumExperience_not_in: [String!]

  """All values less than the given value."""
  minimumExperience_lt: String

  """All values less than or equal the given value."""
  minimumExperience_lte: String

  """All values greater than the given value."""
  minimumExperience_gt: String

  """All values greater than or equal the given value."""
  minimumExperience_gte: String

  """All values containing the given string."""
  minimumExperience_contains: String

  """All values not containing the given string."""
  minimumExperience_not_contains: String

  """All values starting with the given string."""
  minimumExperience_starts_with: String

  """All values not starting with the given string."""
  minimumExperience_not_starts_with: String

  """All values ending with the given string."""
  minimumExperience_ends_with: String

  """All values not ending with the given string."""
  minimumExperience_not_ends_with: String
  internationalOK: Boolean

  """All values that are not equal to given value."""
  internationalOK_not: Boolean
  hasRelocationAllowance: Boolean

  """All values that are not equal to given value."""
  hasRelocationAllowance_not: Boolean
  requirements: String

  """All values that are not equal to given value."""
  requirements_not: String

  """All values that are contained in given list."""
  requirements_in: [String!]

  """All values that are not contained in given list."""
  requirements_not_in: [String!]

  """All values less than the given value."""
  requirements_lt: String

  """All values less than or equal the given value."""
  requirements_lte: String

  """All values greater than the given value."""
  requirements_gt: String

  """All values greater than or equal the given value."""
  requirements_gte: String

  """All values containing the given string."""
  requirements_contains: String

  """All values not containing the given string."""
  requirements_not_contains: String

  """All values starting with the given string."""
  requirements_starts_with: String

  """All values not starting with the given string."""
  requirements_not_starts_with: String

  """All values ending with the given string."""
  requirements_ends_with: String

  """All values not ending with the given string."""
  requirements_not_ends_with: String
  niceToHave: String

  """All values that are not equal to given value."""
  niceToHave_not: String

  """All values that are contained in given list."""
  niceToHave_in: [String!]

  """All values that are not contained in given list."""
  niceToHave_not_in: [String!]

  """All values less than the given value."""
  niceToHave_lt: String

  """All values less than or equal the given value."""
  niceToHave_lte: String

  """All values greater than the given value."""
  niceToHave_gt: String

  """All values greater than or equal the given value."""
  niceToHave_gte: String

  """All values containing the given string."""
  niceToHave_contains: String

  """All values not containing the given string."""
  niceToHave_not_contains: String

  """All values starting with the given string."""
  niceToHave_starts_with: String

  """All values not starting with the given string."""
  niceToHave_not_starts_with: String

  """All values ending with the given string."""
  niceToHave_ends_with: String

  """All values not ending with the given string."""
  niceToHave_not_ends_with: String
  releaseAt: DateTime

  """All values that are not equal to given value."""
  releaseAt_not: DateTime

  """All values that are contained in given list."""
  releaseAt_in: [DateTime!]

  """All values that are not contained in given list."""
  releaseAt_not_in: [DateTime!]

  """All values less than the given value."""
  releaseAt_lt: DateTime

  """All values less than or equal the given value."""
  releaseAt_lte: DateTime

  """All values greater than the given value."""
  releaseAt_gt: DateTime

  """All values greater than or equal the given value."""
  releaseAt_gte: DateTime
  expiresAt: DateTime

  """All values that are not equal to given value."""
  expiresAt_not: DateTime

  """All values that are contained in given list."""
  expiresAt_in: [DateTime!]

  """All values that are not contained in given list."""
  expiresAt_not_in: [DateTime!]

  """All values less than the given value."""
  expiresAt_lt: DateTime

  """All values less than or equal the given value."""
  expiresAt_lte: DateTime

  """All values greater than the given value."""
  expiresAt_gt: DateTime

  """All values greater than or equal the given value."""
  expiresAt_gte: DateTime
  status: PostingStatus

  """All values that are not equal to given value."""
  status_not: PostingStatus

  """All values that are contained in given list."""
  status_in: [PostingStatus!]

  """All values that are not contained in given list."""
  status_not_in: [PostingStatus!]
  createdDate: DateTime

  """All values that are not equal to given value."""
  createdDate_not: DateTime

  """All values that are contained in given list."""
  createdDate_in: [DateTime!]

  """All values that are not contained in given list."""
  createdDate_not_in: [DateTime!]

  """All values less than the given value."""
  createdDate_lt: DateTime

  """All values less than or equal the given value."""
  createdDate_lte: DateTime

  """All values greater than the given value."""
  createdDate_gt: DateTime

  """All values greater than or equal the given value."""
  createdDate_gte: DateTime
  offeredBy: EmployerWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
}

input PostingWhereUniqueInput {
  id: ID
  customId: String
}

type Query {
  employers(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employer]!
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  employmentProcesses(where: EmploymentProcessWhereInput, orderBy: EmploymentProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmploymentProcess]!
  postings(where: PostingWhereInput, orderBy: PostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Posting]!
  messageThreads(where: MessageThreadWhereInput, orderBy: MessageThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MessageThread]!
  yearMonths(where: YearMonthWhereInput, orderBy: YearMonthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [YearMonth]!
  languageSkills(where: LanguageSkillWhereInput, orderBy: LanguageSkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LanguageSkill]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  employer(where: EmployerWhereUniqueInput!): Employer
  application(where: ApplicationWhereUniqueInput!): Application
  employmentProcess(where: EmploymentProcessWhereUniqueInput!): EmploymentProcess
  posting(where: PostingWhereUniqueInput!): Posting
  messageThread(where: MessageThreadWhereUniqueInput!): MessageThread
  user(where: UserWhereUniqueInput!): User
  employersConnection(where: EmployerWhereInput, orderBy: EmployerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployerConnection!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  employmentProcessesConnection(where: EmploymentProcessWhereInput, orderBy: EmploymentProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmploymentProcessConnection!
  postingsConnection(where: PostingWhereInput, orderBy: PostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostingConnection!
  messageThreadsConnection(where: MessageThreadWhereInput, orderBy: MessageThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageThreadConnection!
  yearMonthsConnection(where: YearMonthWhereInput, orderBy: YearMonthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): YearMonthConnection!
  languageSkillsConnection(where: LanguageSkillWhereInput, orderBy: LanguageSkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageSkillConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  employer(where: EmployerSubscriptionWhereInput): EmployerSubscriptionPayload
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  employmentProcess(where: EmploymentProcessSubscriptionWhereInput): EmploymentProcessSubscriptionPayload
  posting(where: PostingSubscriptionWhereInput): PostingSubscriptionPayload
  messageThread(where: MessageThreadSubscriptionWhereInput): MessageThreadSubscriptionPayload
  yearMonth(where: YearMonthSubscriptionWhereInput): YearMonthSubscriptionPayload
  languageSkill(where: LanguageSkillSubscriptionWhereInput): LanguageSkillSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  firstName: String!
  middleNames: [String!]!
  lastName: String!
  hashedPassword: String!
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  interestTags: [String!]!
  userType: UserType!
  employer: Employer
  employerAccessRights: EmployerAccessRights
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  messageThreads(where: MessageThreadWhereInput, orderBy: MessageThreadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MessageThread!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  hashedPassword: String!
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType!
  employerAccessRights: EmployerAccessRights
  middleNames: UserCreatemiddleNamesInput
  interestTags: UserCreateinterestTagsInput
  employer: EmployerCreateOneWithoutUsersInput
  applications: ApplicationCreateManyWithoutApplicantInput
  messageThreads: MessageThreadCreateManyWithoutUsersInput
}

input UserCreateinterestTagsInput {
  set: [String!]
}

input UserCreateManyWithoutEmployerInput {
  create: [UserCreateWithoutEmployerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutMessageThreadsInput {
  create: [UserCreateWithoutMessageThreadsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreatemiddleNamesInput {
  set: [String!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutApplicationsInput {
  create: UserCreateWithoutApplicationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApplicationsInput {
  email: String!
  firstName: String!
  lastName: String!
  hashedPassword: String!
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType!
  employerAccessRights: EmployerAccessRights
  middleNames: UserCreatemiddleNamesInput
  interestTags: UserCreateinterestTagsInput
  employer: EmployerCreateOneWithoutUsersInput
  messageThreads: MessageThreadCreateManyWithoutUsersInput
}

input UserCreateWithoutEmployerInput {
  email: String!
  firstName: String!
  lastName: String!
  hashedPassword: String!
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType!
  employerAccessRights: EmployerAccessRights
  middleNames: UserCreatemiddleNamesInput
  interestTags: UserCreateinterestTagsInput
  applications: ApplicationCreateManyWithoutApplicantInput
  messageThreads: MessageThreadCreateManyWithoutUsersInput
}

input UserCreateWithoutMessageThreadsInput {
  email: String!
  firstName: String!
  lastName: String!
  hashedPassword: String!
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType!
  employerAccessRights: EmployerAccessRights
  middleNames: UserCreatemiddleNamesInput
  interestTags: UserCreateinterestTagsInput
  employer: EmployerCreateOneWithoutUsersInput
  applications: ApplicationCreateManyWithoutApplicantInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  hashedPassword_ASC
  hashedPassword_DESC
  aboutMe_ASC
  aboutMe_DESC
  nationality_ASC
  nationality_DESC
  livingInCountry_ASC
  livingInCountry_DESC
  livingInCity_ASC
  livingInCity_DESC
  website_ASC
  website_DESC
  languageSkills_ASC
  languageSkills_DESC
  workExperience_ASC
  workExperience_DESC
  education_ASC
  education_DESC
  userType_ASC
  userType_DESC
  employerAccessRights_ASC
  employerAccessRights_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  firstName: String!
  middleNames: [String!]!
  lastName: String!
  hashedPassword: String!
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  interestTags: [String!]!
  userType: UserType!
  employerAccessRights: EmployerAccessRights
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

enum UserType {
  CANDIDATE
  EMPLOYER
}

input UserUpdateDataInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  interestTags: UserUpdateinterestTagsInput
  employer: EmployerUpdateOneWithoutUsersInput
  applications: ApplicationUpdateManyWithoutApplicantInput
  messageThreads: MessageThreadUpdateManyWithoutUsersInput
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  interestTags: UserUpdateinterestTagsInput
  employer: EmployerUpdateOneWithoutUsersInput
  applications: ApplicationUpdateManyWithoutApplicantInput
  messageThreads: MessageThreadUpdateManyWithoutUsersInput
}

input UserUpdateinterestTagsInput {
  set: [String!]
}

input UserUpdateManyWithoutEmployerInput {
  create: [UserCreateWithoutEmployerInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutEmployerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutEmployerInput!]
}

input UserUpdateManyWithoutMessageThreadsInput {
  create: [UserCreateWithoutMessageThreadsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMessageThreadsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMessageThreadsInput!]
}

input UserUpdatemiddleNamesInput {
  set: [String!]
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutApplicationsInput {
  create: UserCreateWithoutApplicationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutApplicationsDataInput
  upsert: UserUpsertWithoutApplicationsInput
}

input UserUpdateWithoutApplicationsDataInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  interestTags: UserUpdateinterestTagsInput
  employer: EmployerUpdateOneWithoutUsersInput
  messageThreads: MessageThreadUpdateManyWithoutUsersInput
}

input UserUpdateWithoutEmployerDataInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  interestTags: UserUpdateinterestTagsInput
  applications: ApplicationUpdateManyWithoutApplicantInput
  messageThreads: MessageThreadUpdateManyWithoutUsersInput
}

input UserUpdateWithoutMessageThreadsDataInput {
  email: String
  firstName: String
  lastName: String
  hashedPassword: String
  aboutMe: String
  nationality: String
  livingInCountry: String
  livingInCity: String
  website: String
  languageSkills: String
  workExperience: String
  education: String
  userType: UserType
  employerAccessRights: EmployerAccessRights
  middleNames: UserUpdatemiddleNamesInput
  interestTags: UserUpdateinterestTagsInput
  employer: EmployerUpdateOneWithoutUsersInput
  applications: ApplicationUpdateManyWithoutApplicantInput
}

input UserUpdateWithWhereUniqueWithoutEmployerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEmployerDataInput!
}

input UserUpdateWithWhereUniqueWithoutMessageThreadsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMessageThreadsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutApplicationsInput {
  update: UserUpdateWithoutApplicationsDataInput!
  create: UserCreateWithoutApplicationsInput!
}

input UserUpsertWithWhereUniqueWithoutEmployerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEmployerDataInput!
  create: UserCreateWithoutEmployerInput!
}

input UserUpsertWithWhereUniqueWithoutMessageThreadsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMessageThreadsDataInput!
  create: UserCreateWithoutMessageThreadsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  hashedPassword: String

  """All values that are not equal to given value."""
  hashedPassword_not: String

  """All values that are contained in given list."""
  hashedPassword_in: [String!]

  """All values that are not contained in given list."""
  hashedPassword_not_in: [String!]

  """All values less than the given value."""
  hashedPassword_lt: String

  """All values less than or equal the given value."""
  hashedPassword_lte: String

  """All values greater than the given value."""
  hashedPassword_gt: String

  """All values greater than or equal the given value."""
  hashedPassword_gte: String

  """All values containing the given string."""
  hashedPassword_contains: String

  """All values not containing the given string."""
  hashedPassword_not_contains: String

  """All values starting with the given string."""
  hashedPassword_starts_with: String

  """All values not starting with the given string."""
  hashedPassword_not_starts_with: String

  """All values ending with the given string."""
  hashedPassword_ends_with: String

  """All values not ending with the given string."""
  hashedPassword_not_ends_with: String
  aboutMe: String

  """All values that are not equal to given value."""
  aboutMe_not: String

  """All values that are contained in given list."""
  aboutMe_in: [String!]

  """All values that are not contained in given list."""
  aboutMe_not_in: [String!]

  """All values less than the given value."""
  aboutMe_lt: String

  """All values less than or equal the given value."""
  aboutMe_lte: String

  """All values greater than the given value."""
  aboutMe_gt: String

  """All values greater than or equal the given value."""
  aboutMe_gte: String

  """All values containing the given string."""
  aboutMe_contains: String

  """All values not containing the given string."""
  aboutMe_not_contains: String

  """All values starting with the given string."""
  aboutMe_starts_with: String

  """All values not starting with the given string."""
  aboutMe_not_starts_with: String

  """All values ending with the given string."""
  aboutMe_ends_with: String

  """All values not ending with the given string."""
  aboutMe_not_ends_with: String
  nationality: String

  """All values that are not equal to given value."""
  nationality_not: String

  """All values that are contained in given list."""
  nationality_in: [String!]

  """All values that are not contained in given list."""
  nationality_not_in: [String!]

  """All values less than the given value."""
  nationality_lt: String

  """All values less than or equal the given value."""
  nationality_lte: String

  """All values greater than the given value."""
  nationality_gt: String

  """All values greater than or equal the given value."""
  nationality_gte: String

  """All values containing the given string."""
  nationality_contains: String

  """All values not containing the given string."""
  nationality_not_contains: String

  """All values starting with the given string."""
  nationality_starts_with: String

  """All values not starting with the given string."""
  nationality_not_starts_with: String

  """All values ending with the given string."""
  nationality_ends_with: String

  """All values not ending with the given string."""
  nationality_not_ends_with: String
  livingInCountry: String

  """All values that are not equal to given value."""
  livingInCountry_not: String

  """All values that are contained in given list."""
  livingInCountry_in: [String!]

  """All values that are not contained in given list."""
  livingInCountry_not_in: [String!]

  """All values less than the given value."""
  livingInCountry_lt: String

  """All values less than or equal the given value."""
  livingInCountry_lte: String

  """All values greater than the given value."""
  livingInCountry_gt: String

  """All values greater than or equal the given value."""
  livingInCountry_gte: String

  """All values containing the given string."""
  livingInCountry_contains: String

  """All values not containing the given string."""
  livingInCountry_not_contains: String

  """All values starting with the given string."""
  livingInCountry_starts_with: String

  """All values not starting with the given string."""
  livingInCountry_not_starts_with: String

  """All values ending with the given string."""
  livingInCountry_ends_with: String

  """All values not ending with the given string."""
  livingInCountry_not_ends_with: String
  livingInCity: String

  """All values that are not equal to given value."""
  livingInCity_not: String

  """All values that are contained in given list."""
  livingInCity_in: [String!]

  """All values that are not contained in given list."""
  livingInCity_not_in: [String!]

  """All values less than the given value."""
  livingInCity_lt: String

  """All values less than or equal the given value."""
  livingInCity_lte: String

  """All values greater than the given value."""
  livingInCity_gt: String

  """All values greater than or equal the given value."""
  livingInCity_gte: String

  """All values containing the given string."""
  livingInCity_contains: String

  """All values not containing the given string."""
  livingInCity_not_contains: String

  """All values starting with the given string."""
  livingInCity_starts_with: String

  """All values not starting with the given string."""
  livingInCity_not_starts_with: String

  """All values ending with the given string."""
  livingInCity_ends_with: String

  """All values not ending with the given string."""
  livingInCity_not_ends_with: String
  website: String

  """All values that are not equal to given value."""
  website_not: String

  """All values that are contained in given list."""
  website_in: [String!]

  """All values that are not contained in given list."""
  website_not_in: [String!]

  """All values less than the given value."""
  website_lt: String

  """All values less than or equal the given value."""
  website_lte: String

  """All values greater than the given value."""
  website_gt: String

  """All values greater than or equal the given value."""
  website_gte: String

  """All values containing the given string."""
  website_contains: String

  """All values not containing the given string."""
  website_not_contains: String

  """All values starting with the given string."""
  website_starts_with: String

  """All values not starting with the given string."""
  website_not_starts_with: String

  """All values ending with the given string."""
  website_ends_with: String

  """All values not ending with the given string."""
  website_not_ends_with: String
  languageSkills: String

  """All values that are not equal to given value."""
  languageSkills_not: String

  """All values that are contained in given list."""
  languageSkills_in: [String!]

  """All values that are not contained in given list."""
  languageSkills_not_in: [String!]

  """All values less than the given value."""
  languageSkills_lt: String

  """All values less than or equal the given value."""
  languageSkills_lte: String

  """All values greater than the given value."""
  languageSkills_gt: String

  """All values greater than or equal the given value."""
  languageSkills_gte: String

  """All values containing the given string."""
  languageSkills_contains: String

  """All values not containing the given string."""
  languageSkills_not_contains: String

  """All values starting with the given string."""
  languageSkills_starts_with: String

  """All values not starting with the given string."""
  languageSkills_not_starts_with: String

  """All values ending with the given string."""
  languageSkills_ends_with: String

  """All values not ending with the given string."""
  languageSkills_not_ends_with: String
  workExperience: String

  """All values that are not equal to given value."""
  workExperience_not: String

  """All values that are contained in given list."""
  workExperience_in: [String!]

  """All values that are not contained in given list."""
  workExperience_not_in: [String!]

  """All values less than the given value."""
  workExperience_lt: String

  """All values less than or equal the given value."""
  workExperience_lte: String

  """All values greater than the given value."""
  workExperience_gt: String

  """All values greater than or equal the given value."""
  workExperience_gte: String

  """All values containing the given string."""
  workExperience_contains: String

  """All values not containing the given string."""
  workExperience_not_contains: String

  """All values starting with the given string."""
  workExperience_starts_with: String

  """All values not starting with the given string."""
  workExperience_not_starts_with: String

  """All values ending with the given string."""
  workExperience_ends_with: String

  """All values not ending with the given string."""
  workExperience_not_ends_with: String
  education: String

  """All values that are not equal to given value."""
  education_not: String

  """All values that are contained in given list."""
  education_in: [String!]

  """All values that are not contained in given list."""
  education_not_in: [String!]

  """All values less than the given value."""
  education_lt: String

  """All values less than or equal the given value."""
  education_lte: String

  """All values greater than the given value."""
  education_gt: String

  """All values greater than or equal the given value."""
  education_gte: String

  """All values containing the given string."""
  education_contains: String

  """All values not containing the given string."""
  education_not_contains: String

  """All values starting with the given string."""
  education_starts_with: String

  """All values not starting with the given string."""
  education_not_starts_with: String

  """All values ending with the given string."""
  education_ends_with: String

  """All values not ending with the given string."""
  education_not_ends_with: String
  userType: UserType

  """All values that are not equal to given value."""
  userType_not: UserType

  """All values that are contained in given list."""
  userType_in: [UserType!]

  """All values that are not contained in given list."""
  userType_not_in: [UserType!]
  employerAccessRights: EmployerAccessRights

  """All values that are not equal to given value."""
  employerAccessRights_not: EmployerAccessRights

  """All values that are contained in given list."""
  employerAccessRights_in: [EmployerAccessRights!]

  """All values that are not contained in given list."""
  employerAccessRights_not_in: [EmployerAccessRights!]
  employer: EmployerWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  messageThreads_every: MessageThreadWhereInput
  messageThreads_some: MessageThreadWhereInput
  messageThreads_none: MessageThreadWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type YearMonth {
  year: Int!
  month: Int!
}

"""A connection to a list of items."""
type YearMonthConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [YearMonthEdge]!
  aggregate: AggregateYearMonth!
}

input YearMonthCreateInput {
  year: Int!
  month: Int!
}

"""An edge in a connection."""
type YearMonthEdge {
  """The item at the end of the edge."""
  node: YearMonth!

  """A cursor for use in pagination."""
  cursor: String!
}

enum YearMonthOrderByInput {
  year_ASC
  year_DESC
  month_ASC
  month_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type YearMonthPreviousValues {
  year: Int!
  month: Int!
}

type YearMonthSubscriptionPayload {
  mutation: MutationType!
  node: YearMonth
  updatedFields: [String!]
  previousValues: YearMonthPreviousValues
}

input YearMonthSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [YearMonthSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [YearMonthSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [YearMonthSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: YearMonthWhereInput
}

input YearMonthUpdateInput {
  year: Int
  month: Int
}

input YearMonthWhereInput {
  """Logical AND on all given filters."""
  AND: [YearMonthWhereInput!]

  """Logical OR on all given filters."""
  OR: [YearMonthWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [YearMonthWhereInput!]
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  month: Int

  """All values that are not equal to given value."""
  month_not: Int

  """All values that are contained in given list."""
  month_in: [Int!]

  """All values that are not contained in given list."""
  month_not_in: [Int!]

  """All values less than the given value."""
  month_lt: Int

  """All values less than or equal the given value."""
  month_lte: Int

  """All values greater than the given value."""
  month_gt: Int

  """All values greater than or equal the given value."""
  month_gte: Int
}
